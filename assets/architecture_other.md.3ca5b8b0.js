import{_ as e,o as t,c as o,Q as n}from"./chunks/framework.1a91c06a.js";const g=JSON.parse('{"title":"Other modules","description":"","frontmatter":{"id":"other-modules","title":"Other modules","head":[["meta",{"property":"og:title","content":"Other modules | Lyfebloc Docs"}],["meta",{"property":"og:description","content":"Lyfebloc Network is a highly scalable modular blockchain powering dynamic applications with extensive full-stack adaptability."}]]},"headers":[],"relativePath":"architecture/other.md","filePath":"architecture/other.md","lastUpdated":1739729557000}'),a={name:"architecture/other.md"},r=n('<h2 id="crypto" tabindex="-1">Crypto <a class="header-anchor" href="#crypto" aria-label="Permalink to &quot;Crypto&quot;">​</a></h2><p>The <strong>Crypto</strong> module contains crypto utility functions.</p><h2 id="chain" tabindex="-1">Chain <a class="header-anchor" href="#chain" aria-label="Permalink to &quot;Chain&quot;">​</a></h2><p>The <strong>Chain</strong> module contains chain parameters (active forks, consensus engine, etc.)</p><ul><li><strong>chains</strong> - Predefined chain configurations (mainnet, goerli, ibft)</li></ul><h2 id="helper" tabindex="-1">Helper <a class="header-anchor" href="#helper" aria-label="Permalink to &quot;Helper&quot;">​</a></h2><p>The <strong>Helper</strong> module contains helper packages.</p><ul><li><strong>dao</strong> - Dao utils</li><li><strong>enode</strong> - Enode encoding/decoding function</li><li><strong>hex</strong> - Hex encoding/decoding functions</li><li><strong>ipc</strong> - IPC connection functions</li><li><strong>keccak</strong> - Keccak functions</li><li><strong>rlputil</strong> - Rlp encoding/decoding helper function</li></ul><h2 id="command" tabindex="-1">Command <a class="header-anchor" href="#command" aria-label="Permalink to &quot;Command&quot;">​</a></h2><p>The <strong>Command</strong> module contains interfaces for CLI commands.</p>',10),i=[r];function c(s,l,d,h,p,u){return t(),o("div",null,i)}const f=e(a,[["render",c]]);export{g as __pageData,f as default};
