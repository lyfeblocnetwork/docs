import{_ as e,o as s,c as o,Q as n}from"./chunks/framework.1a91c06a.js";const y=JSON.parse('{"title":"Networking","description":"","frontmatter":{"id":"networking","title":"Networking","head":[["meta",{"property":"og:title","content":"Networking | Lyfebloc Docs"}],["meta",{"property":"og:description","content":"Lyfebloc Network is a highly scalable modular blockchain powering dynamic applications with extensive full-stack adaptability."}]]},"headers":[],"relativePath":"architecture/networking.md","filePath":"architecture/networking.md","lastUpdated":1739729557000}'),a={name:"architecture/networking.md"},t=n(`<h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">â€‹</a></h2><p>A node has to communicate with other nodes on the network, in order to exchange useful information.<br> To accomplish this task, Lyfebloc Network leverages the battle-tested <strong>libp2p</strong> framework.</p><p>The choice to go with <strong>libp2p</strong> is primarily focused on:</p><ul><li><strong>Speed</strong> - libp2p has a significant performance improvement over devp2p (used in GETH and other clients)</li><li><strong>Extensibility</strong> - it serves as a great foundation for other features of the system</li><li><strong>Modularity</strong> - libp2p is modular by nature, just like Lyfebloc Network. This gives greater flexibility, especially when parts of Lyfebloc Network need to be swappable</li></ul><h2 id="grpc" tabindex="-1">GRPC <a class="header-anchor" href="#grpc" aria-label="Permalink to &quot;GRPC&quot;">â€‹</a></h2><p>On top of <strong>libp2p</strong>, Lyfebloc Network uses the <strong>GRPC</strong> protocol. <br> Technically, Lyfebloc Network uses several GRPC protocols, which will be covered later on.</p><p>The GRPC layer helps abstract all the request/reply protocols and simplifies the streaming protocols needed for Lyfebloc Network to function.</p><p>GRPC relies on <strong>Protocol Buffers</strong> to define <em>services</em> and <em>message structures</em>. <br> The services and structures are defined in <em>.proto</em> files, which are compiled and are language-agnostic.</p><p>Earlier, we mentioned that Lyfebloc Network leverages several GRPC protocols.<br> This was done to boost the overall UX for the node operator, something which often lags with clients like GETH and Parity.</p><p>The node operator has a better overview of what is going on with the system by calling the GRPC service, instead of sifting through logs to find the information they&#39;re looking for.</p><h3 id="grpc-for-node-operators" tabindex="-1">GRPC for Node Operators <a class="header-anchor" href="#grpc-for-node-operators" aria-label="Permalink to &quot;GRPC for Node Operators&quot;">â€‹</a></h3><p>The following section might seem familiar because it was briefly covered in the <a href="/docs/get-started/cli-commands">CLI Commands</a> section.</p><p>The GRPC service that is intended to be used by <strong>node operators</strong> is defined like so:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">service System {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// GetInfo returns info about the client</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#79B8FF;">GetStatus</span><span style="color:#E1E4E8;">(google.protobuf.Empty) returns (ServerStatus);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// PeersAdd adds a new peer</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#79B8FF;">PeersAdd</span><span style="color:#E1E4E8;">(PeersAddRequest) returns (google.protobuf.Empty);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// PeersList returns the list of peers</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#79B8FF;">PeersList</span><span style="color:#E1E4E8;">(google.protobuf.Empty) returns (PeersListResponse);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// PeersInfo returns the info of a peer</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#79B8FF;">PeersStatus</span><span style="color:#E1E4E8;">(PeersStatusRequest) returns (Peer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Subscribe subscribes to blockchain events</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#79B8FF;">Subscribe</span><span style="color:#E1E4E8;">(google.protobuf.Empty) returns (stream BlockchainEvent);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">service System {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// GetInfo returns info about the client</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#005CC5;">GetStatus</span><span style="color:#24292E;">(google.protobuf.Empty) returns (ServerStatus);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// PeersAdd adds a new peer</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#005CC5;">PeersAdd</span><span style="color:#24292E;">(PeersAddRequest) returns (google.protobuf.Empty);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// PeersList returns the list of peers</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#005CC5;">PeersList</span><span style="color:#24292E;">(google.protobuf.Empty) returns (PeersListResponse);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// PeersInfo returns the info of a peer</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#005CC5;">PeersStatus</span><span style="color:#24292E;">(PeersStatusRequest) returns (Peer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Subscribe subscribes to blockchain events</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#005CC5;">Subscribe</span><span style="color:#24292E;">(google.protobuf.Empty) returns (stream BlockchainEvent);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The CLI commands actually call the implementations of these service methods.</p><p>These methods are implemented in <em><strong>minimal/system_service.go</strong></em>.</p></div><h3 id="grpc-for-other-nodes" tabindex="-1">GRPC for Other Nodes <a class="header-anchor" href="#grpc-for-other-nodes" aria-label="Permalink to &quot;GRPC for Other Nodes&quot;">â€‹</a></h3><p>Lyfebloc Network also implements several service methods that are used by other nodes on the network. <br> The mentioned service is described in the <strong><a href="/docs/architecture/modules/protocol">Protocol</a></strong> section.</p><h2 id="ðŸ“œ-resources" tabindex="-1">ðŸ“œ Resources <a class="header-anchor" href="#ðŸ“œ-resources" aria-label="Permalink to &quot;ðŸ“œ Resources&quot;">â€‹</a></h2><ul><li><strong><a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noreferrer">Protocol Buffers</a></strong></li><li><strong><a href="https://libp2p.io/" target="_blank" rel="noreferrer">libp2p</a></strong></li><li><strong><a href="https://grpc.io/" target="_blank" rel="noreferrer">gRPC</a></strong></li></ul>`,19),r=[t];function l(p,i,c,h,d,u){return s(),o("div",null,r)}const f=e(a,[["render",l]]);export{y as __pageData,f as default};
