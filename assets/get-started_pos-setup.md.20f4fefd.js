import{_ as e,o as s,c as t,Q as a}from"./chunks/framework.1a91c06a.js";const f=JSON.parse('{"title":"Set up and use Proof of Stake (PoS)","description":"","frontmatter":{"id":"pos-setup","title":"Set up and use Proof of Stake (PoS)","head":[["meta",{"property":"og:title","content":"Set up and use Proof of Stake (PoS) | Lyfebloc Docs"}],["meta",{"property":"og:description","content":"Lyfebloc Network is a highly scalable modular blockchain powering dynamic applications with extensive full-stack adaptability."}]]},"headers":[],"relativePath":"get-started/pos-setup.md","filePath":"get-started/pos-setup.md","lastUpdated":1739729557000}'),o={name:"get-started/pos-setup.md"},n=a(`<h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>This guide goes into detail on how to set up a Proof of Stake network with Lyfebloc Network, how to stake funds for nodes to become validators and how to unstake funds.</p><p>It <strong>highly encouraged</strong> to read and go through the <a href="/docs/get-started/set-up-ibft-locally">Local Setup</a> / <a href="/docs/get-started/set-up-ibft-on-the-cloud">Cloud Setup</a> sections, before going along with this PoS guide. These sections outline the steps needed to start a Proof of Authority (PoA) cluster with the Lyfebloc Network.</p><p>Currently, there is no limit to the number of validators that can stake funds on the Staking Smart Contract.</p><h2 id="staking-smart-contract" tabindex="-1">Staking Smart Contract <a class="header-anchor" href="#staking-smart-contract" aria-label="Permalink to &quot;Staking Smart Contract&quot;">​</a></h2><p>The repo for the Staking Smart Contract is located <a href="https://github.com/techaroha/staking-contracts" target="_blank" rel="noreferrer">here</a>.</p><p>It holds the necessary testing scripts, ABI files and most importantly the Staking Smart Contract itself.</p><h2 id="setting-up-an-n-node-cluster" tabindex="-1">Setting up an N node cluster <a class="header-anchor" href="#setting-up-an-n-node-cluster" aria-label="Permalink to &quot;Setting up an N node cluster&quot;">​</a></h2><p>Setting up a network with Lyfebloc Network is covered in the <a href="/docs/get-started/set-up-ibft-locally">Local Setup</a> / <a href="/docs/get-started/set-up-ibft-on-the-cloud">Cloud Setup</a> sections.</p><p>The <strong>only difference</strong> between setting up a PoS and PoA cluster is in the genesis generation part.</p><p><strong>When generating the genesis file for a PoS cluster, an additional flag is needed <code>--pos</code></strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">lyfebloc-core</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">genesis</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--pos</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">lyfebloc-core</span><span style="color:#24292E;"> </span><span style="color:#032F62;">genesis</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--pos</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span></span></code></pre></div><h2 id="setting-the-length-of-an-epoch" tabindex="-1">Setting the length of an epoch <a class="header-anchor" href="#setting-the-length-of-an-epoch" aria-label="Permalink to &quot;Setting the length of an epoch&quot;">​</a></h2><p>Epochs are covered in detail in the <a href="/docs/consensus/pos-concepts#epoch-blocks">Epoch Blocks</a> section.</p><p>To set the size of an epoch for a cluster (in blocks), when generating the genesis file, an additional flag is specified <code>--epoch-size</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">lyfebloc-core</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">genesis</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--epoch-size</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">50</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">lyfebloc-core</span><span style="color:#24292E;"> </span><span style="color:#032F62;">genesis</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--epoch-size</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50</span></span></code></pre></div><p>This value specified in the genesis file that the epoch size should be <code>50</code> blocks.</p><p>The default value for the size of an epoch (in blocks) is <code>100000</code>.</p><div class="info custom-block"><p class="custom-block-title">Lowering the epoch length</p><p>As outlined in the <a href="/docs/consensus/pos-concepts#epoch-blocks">Epoch Blocks</a> section, epoch blocks are used to update the validator sets for nodes.</p><p>The default epoch length in blocks (<code>100000</code>) may be a long time to way for validator set updates. Considering that new blocks are added ~2s, it would take ~55.5h for the validator set to possibly change.</p><p>Setting a lower value for the epoch length ensures that the validator set is updated more frequently.</p></div><h2 id="using-the-staking-smart-contract-scripts" tabindex="-1">Using the Staking Smart Contract scripts <a class="header-anchor" href="#using-the-staking-smart-contract-scripts" aria-label="Permalink to &quot;Using the Staking Smart Contract scripts&quot;">​</a></h2><h3 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h3><p>The Staking Smart Contract repo is a Hardhat project, which requires NPM.</p><p>To initialize it correctly, in the main directory run:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span></span></code></pre></div><h3 id="setting-up-the-provided-helper-scripts" tabindex="-1">Setting up the provided helper scripts <a class="header-anchor" href="#setting-up-the-provided-helper-scripts" aria-label="Permalink to &quot;Setting up the provided helper scripts&quot;">​</a></h3><p>Scripts for interacting with the deployed Staking Smart Contract are located on the <a href="https://github.com/techaroha/staking-contracts" target="_blank" rel="noreferrer">Staking Smart Contract repo</a>.</p><p>Create an <code>.env</code> file with the following parameters in the Smart Contracts repo location:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">JSONRPC_URL</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">http://localhost:10002</span></span>
<span class="line"><span style="color:#E1E4E8;">PRIVATE_KEYS</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0x0454f3ec51e7d6971fc345998bb2ba483a8d9d30d46ad890434e6f88ecb97544</span></span>
<span class="line"><span style="color:#E1E4E8;">STAKING_CONTRACT_ADDRESS</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0x0000000000000000000000000000000000001001</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">JSONRPC_URL</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">http://localhost:10002</span></span>
<span class="line"><span style="color:#24292E;">PRIVATE_KEYS</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0x0454f3ec51e7d6971fc345998bb2ba483a8d9d30d46ad890434e6f88ecb97544</span></span>
<span class="line"><span style="color:#24292E;">STAKING_CONTRACT_ADDRESS</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0x0000000000000000000000000000000000001001</span></span></code></pre></div><p>Where the parameters are:</p><ul><li><strong>JSONRPC_URL</strong> - the JSON-RPC endpoint for the running node</li><li><strong>PRIVATE_KEYS</strong> - private keys of the staker address</li><li><strong>STAKING_CONTRACT_ADDRESS</strong> - the address of the staking smart contract ( default <code>0x0000000000000000000000000000000000001001</code>)</li></ul><h3 id="staking-funds" tabindex="-1">Staking funds <a class="header-anchor" href="#staking-funds" aria-label="Permalink to &quot;Staking funds&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">Staking address</p><p>The Staking Smart Contract is pre-deployed at address <code>0x0000000000000000000000000000000000001001</code>.</p><p>Any kind of interaction with the staking mechanism is done through the Staking Smart Contract at the specified address.</p><p>To learn more about the Staking Smart Contract, please visit the <a href="/docs/consensus/pos-concepts#contract-pre-deployment">Staking Smart Contract</a> section.</p></div><p>In order to become part of the validator set, an address needs to stake a certain amount of funds above a threshold.</p><p>Currently, the default threshold for becoming part of the validator set is <code>1 ETH</code>.</p><p>Staking can be initiated by calling the <code>stake</code> method of the Staking Smart Contract, and specifying a value <code>&gt;= 1 ETH</code>.</p><p>After the <code>.env</code> file mentioned in the <a href="/docs/consensus/pos-stake-unstake#setting-up-the-provided-helper-scripts">previous section</a> has been set up, and a chain has been started in PoS mode, staking can be done with the following command in the Staking Smart Contract repo:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stake</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stake</span></span></code></pre></div><p>The <code>stake</code> Hardhat script stakes a default amount of <code>1 ETH</code>, which can be changed by modifying the <code>scripts/stake.ts</code> file.</p><p>If the funds being staked are <code>&gt;= 1 ETH</code>, the validator set on the Staking Smart Contract is updated, and the address will be part of the validator set starting from the next epoch.</p><h3 id="unstaking-funds" tabindex="-1">Unstaking funds <a class="header-anchor" href="#unstaking-funds" aria-label="Permalink to &quot;Unstaking funds&quot;">​</a></h3><p>Addresses that have a stake can <strong>only unstake all of their funds</strong> at once.</p><p>After the <code>.env</code> file mentioned in the <a href="/docs/consensus/pos-stake-unstake#setting-up-the-provided-helper-scripts">previous section</a> has been set up, and a chain has been started in PoS mode, unstaking can be done with the following command in the Staking Smart Contract repo:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">unstake</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unstake</span></span></code></pre></div><h3 id="fetching-the-list-of-stakers" tabindex="-1">Fetching the list of stakers <a class="header-anchor" href="#fetching-the-list-of-stakers" aria-label="Permalink to &quot;Fetching the list of stakers&quot;">​</a></h3><p>All addresses that stake funds are saved to the Staking Smart Contract.</p><p>After the <code>.env</code> file mentioned in the <a href="/docs/consensus/pos-stake-unstake#setting-up-the-provided-helper-scripts">previous section</a> has been set up, and a chain has been started in PoS mode, fetching the list of validators can be done with the following command in the Staking Smart Contract repo:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span></span></code></pre></div>`,47),p=[n];function l(r,c,i,d,h,g){return s(),t("div",null,p)}const k=e(o,[["render",l]]);export{f as __pageData,k as default};
