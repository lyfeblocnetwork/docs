import{_ as e,o as t,c as a,Q as r}from"./chunks/framework.1a91c06a.js";const o="/img/evm.png",i="/img/gas.png",b=JSON.parse('{"title":"Ethereum Virtual Machine (EVM)","description":"An introduction to the Ethereum virtual machine and how it relates to state, transactions, and smart contracts.","frontmatter":{"title":"Ethereum Virtual Machine (EVM)","description":"An introduction to the Ethereum virtual machine and how it relates to state, transactions, and smart contracts.","lang":"en","head":[["meta",{"property":"og:title","content":"Ethereum Virtual Machine (EVM) | Lyfebloc Docs"}],["meta",{"property":"og:description","content":"An introduction to the Ethereum virtual machine and how it relates to state, transactions, and smart contracts."}]]},"headers":[],"relativePath":"concepts/evm.md","filePath":"concepts/evm.md","lastUpdated":1739729557000}'),n={name:"concepts/evm.md"},s=r('<p>The Ethereum Virtual Machine (EVM) is a decentralized virtual environment that executes code consistently and securely across all Ethereum nodes. Nodes run the EVM to execute smart contracts, using &quot;<a href="/gas/">gas</a>&quot; to measure the computational effort required for <a href="/developers/docs/evm/opcodes/">operations</a>, ensuring efficient resource allocation and network security.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites {#prerequisites}&quot;">​</a></h2><p>Some basic familiarity with common terminology in computer science such as <a href="https://wikipedia.org/wiki/Byte" target="_blank" rel="noreferrer">bytes</a>, <a href="https://wikipedia.org/wiki/Computer_memory" target="_blank" rel="noreferrer">memory</a>, and a <a href="https://wikipedia.org/wiki/Stack_(abstract_data_type)" target="_blank" rel="noreferrer">stack</a> are necessary to understand the EVM. It would also be helpful to be comfortable with cryptography/blockchain concepts like <a href="https://wikipedia.org/wiki/Cryptographic_hash_function" target="_blank" rel="noreferrer">hash functions</a> and the <a href="https://wikipedia.org/wiki/Merkle_tree" target="_blank" rel="noreferrer">Merkle tree</a>.</p><h2 id="from-ledger-to-state-machine" tabindex="-1">From ledger to state machine <a class="header-anchor" href="#from-ledger-to-state-machine" aria-label="Permalink to &quot;From ledger to state machine {#from-ledger-to-state-machine}&quot;">​</a></h2><p>The analogy of a &#39;distributed ledger&#39; is often used to describe blockchains like Bitcoin, which enable a decentralized currency using fundamental tools of cryptography. The ledger maintains a record of activity which must adhere to a set of rules that govern what someone can and cannot do to modify the ledger. For example, a Bitcoin address cannot spend more Bitcoin than it has previously received. These rules underpin all transactions on Bitcoin and many other blockchains.</p><p>While Ethereum has its own native cryptocurrency (ether) that follows almost exactly the same intuitive rules, it also enables a much more powerful function: <a href="/developers/docs/smart-contracts/">smart contracts</a>. For this more complex feature, a more sophisticated analogy is required. Instead of a distributed ledger, Ethereum is a distributed <a href="https://wikipedia.org/wiki/Finite-state_machine" target="_blank" rel="noreferrer">state machine</a>. Ethereum&#39;s state is a large data structure which holds not only all accounts and balances, but a <em>machine state</em>, which can change from block to block according to a pre-defined set of rules, and which can execute arbitrary machine code. The specific rules of changing state from block to block are defined by the EVM.</p><p><img src="'+o+'" alt="A diagram showing the make up of the EVM"><em>Diagram adapted from <a href="https://takenobu-hs.github.io/downloads/ethereum_evm_illustrated.pdf" target="_blank" rel="noreferrer">Ethereum EVM illustrated</a></em></p><h2 id="the-ethereum-state-transition-function" tabindex="-1">The Ethereum state transition function <a class="header-anchor" href="#the-ethereum-state-transition-function" aria-label="Permalink to &quot;The Ethereum state transition function {#the-ethereum-state-transition-function}&quot;">​</a></h2><p>The EVM behaves as a mathematical function would: Given an input, it produces a deterministic output. It therefore is quite helpful to more formally describe Ethereum as having a <strong>state transition function</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Y(S, T)= S&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Y(S, T)= S&#39;</span></span></code></pre></div><p>Given an old valid state <code>(S)</code> and a new set of valid transactions <code>(T)</code>, the Ethereum state transition function <code>Y(S, T)</code> produces a new valid output state <code>S&#39;</code></p><h3 id="state" tabindex="-1">State <a class="header-anchor" href="#state" aria-label="Permalink to &quot;State {#state}&quot;">​</a></h3><p>In the context of Ethereum, the state is an enormous data structure called a <a href="/developers/docs/data-structures-and-encoding/patricia-merkle-trie/">modified Merkle Patricia Trie</a>, which keeps all <a href="/developers/docs/accounts/">accounts</a> linked by hashes and reducible to a single root hash stored on the blockchain.</p><h3 id="transactions" tabindex="-1">Transactions <a class="header-anchor" href="#transactions" aria-label="Permalink to &quot;Transactions {#transactions}&quot;">​</a></h3><p>Transactions are cryptographically signed instructions from accounts. There are two types of transactions: those which result in message calls and those which result in contract creation.</p><p>Contract creation results in the creation of a new contract account containing compiled <a href="/developers/docs/smart-contracts/anatomy/">smart contract</a> bytecode. Whenever another account makes a message call to that contract, it executes its bytecode.</p><h2 id="evm-instructions" tabindex="-1">EVM instructions <a class="header-anchor" href="#evm-instructions" aria-label="Permalink to &quot;EVM instructions {#evm-instructions}&quot;">​</a></h2><p>The EVM executes as a <a href="https://wikipedia.org/wiki/Stack_machine" target="_blank" rel="noreferrer">stack machine</a> with a depth of 1024 items. Each item is a 256-bit word, which was chosen for the ease of use with 256-bit cryptography (such as Keccak-256 hashes or secp256k1 signatures).</p><p>During execution, the EVM maintains a transient <em>memory</em> (as a word-addressed byte array), which does not persist between transactions.</p><p>Contracts, however, do contain a Merkle Patricia <em>storage</em> trie (as a word-addressable word array), associated with the account in question and part of the global state.</p><p>Compiled smart contract bytecode executes as a number of EVM <a href="/developers/docs/evm/opcodes">opcodes</a>, which perform standard stack operations like <code>XOR</code>, <code>AND</code>, <code>ADD</code>, <code>SUB</code>, etc. The EVM also implements a number of blockchain-specific stack operations, such as <code>ADDRESS</code>, <code>BALANCE</code>, <code>BLOCKHASH</code>, etc.</p><p><img src="'+i+'" alt="A diagram showing where gas is needed for EVM operations"><em>Diagrams adapted from <a href="https://takenobu-hs.github.io/downloads/ethereum_evm_illustrated.pdf" target="_blank" rel="noreferrer">Ethereum EVM illustrated</a></em></p><h2 id="evm-implementations" tabindex="-1">EVM implementations <a class="header-anchor" href="#evm-implementations" aria-label="Permalink to &quot;EVM implementations {#evm-implementations}&quot;">​</a></h2><p>All implementations of the EVM must adhere to the specification described in the Ethereum Yellowpaper.</p><p>Over Ethereum&#39;s nine year history, the EVM has undergone several revisions, and there are several implementations of the EVM in various programming languages.</p><p><a href="/developers/docs/nodes-and-clients/#execution-clients">Ethereum execution clients</a> include an EVM implementation. Additionally, there are multiple standalone implementations, including:</p><ul><li><a href="https://github.com/ethereum/py-evm" target="_blank" rel="noreferrer">Py-EVM</a> - <em>Python</em></li><li><a href="https://github.com/ethereum/evmone" target="_blank" rel="noreferrer">evmone</a> - <em>C++</em></li><li><a href="https://github.com/ethereumjs/ethereumjs-vm" target="_blank" rel="noreferrer">ethereumjs-vm</a> - <em>JavaScript</em></li><li><a href="https://github.com/bluealloy/revm" target="_blank" rel="noreferrer">revm</a> - <em>Rust</em></li></ul><h2 id="further-reading" tabindex="-1">Further Reading <a class="header-anchor" href="#further-reading" aria-label="Permalink to &quot;Further Reading {#further-reading}&quot;">​</a></h2><ul><li><a href="https://ethereum.github.io/yellowpaper/paper.pdf" target="_blank" rel="noreferrer">Ethereum Yellowpaper</a></li><li><a href="https://jellopaper.org/" target="_blank" rel="noreferrer">Jellopaper aka KEVM: Semantics of EVM in K</a></li><li><a href="https://github.com/chronaeon/beigepaper" target="_blank" rel="noreferrer">The Beigepaper</a></li><li><a href="https://www.ethervm.io/" target="_blank" rel="noreferrer">Ethereum Virtual Machine Opcodes</a></li><li><a href="https://www.evm.codes/" target="_blank" rel="noreferrer">Ethereum Virtual Machine Opcodes Interactive Reference</a></li><li><a href="https://docs.soliditylang.org/en/latest/introduction-to-smart-contracts.html#index-6" target="_blank" rel="noreferrer">A short introduction in Solidity&#39;s documentation</a></li><li><a href="https://github.com/ethereumbook/ethereumbook/blob/develop/13evm.asciidoc" target="_blank" rel="noreferrer">Mastering Ethereum - The Ethereum Virtual Machine</a></li></ul>',29),c=[s];function h(l,d,m,u,p,f){return t(),a("div",null,c)}const k=e(n,[["render",h]]);export{b as __pageData,k as default};
