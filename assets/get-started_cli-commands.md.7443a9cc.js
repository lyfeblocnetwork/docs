import{_ as d,C as u,o as c,c as r,H as e,w as s,Q as o,k as l,a as t}from"./chunks/framework.1a91c06a.js";const Uu=JSON.parse('{"title":"CLI Commands","description":"","frontmatter":{"id":"cli-commands","title":"CLI Commands","head":[["meta",{"property":"og:title","content":"CLI Commands | Lyfebloc Docs"}],["meta",{"property":"og:description","content":"Lyfebloc Network is a highly scalable modular blockchain powering dynamic applications with extensive full-stack adaptability."}]]},"headers":[],"relativePath":"get-started/cli-commands.md","filePath":"get-started/cli-commands.md","lastUpdated":1739729557000}'),p={name:"get-started/cli-commands.md"},i=o('<p>import Tabs from &#39;@theme/Tabs&#39;; import TabItem from &#39;@theme/TabItem&#39;;</p><p>This section details the present commands, command flags in Lyfebloc Network, and how they&#39;re used.</p><div class="tip custom-block"><p class="custom-block-title">JSON output support</p><p>The <code>--json</code> flag is supported on some commands. This flag instructs the command to print the output in JSON format</p></div><h2 id="startup-commands" tabindex="-1">Startup Commands <a class="header-anchor" href="#startup-commands" aria-label="Permalink to &quot;Startup Commands&quot;">​</a></h2><table><thead><tr><th><strong>Command</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>server</td><td>The default command that starts the blockchain client, by bootstrapping all modules together</td></tr><tr><td>genesis</td><td>Generates a <em>genesis.json</em> file, which is used to set a predefined chain state before starting the client. The structure of the genesis file is described below</td></tr></tbody></table><h3 id="server-flags" tabindex="-1">server flags <a class="header-anchor" href="#server-flags" aria-label="Permalink to &quot;server flags&quot;">​</a></h3><h4><i>seal</i></h4>',7),_=l("pre",null,[l("code",null,`server [--seal SHOULD_SEAL]
`)],-1),h=l("pre",null,[l("code",null,`server --seal
`)],-1),f=l("p",null,[t("Sets the flag indicating that the client should seal blocks. Default: "),l("code",null,"true"),t(".")],-1),m=l("hr",null,null,-1),b=l("h4",null,[l("i",null,"data-dir")],-1),E=l("pre",null,[l("code",null,`server [--data-dir DATA_DIRECTORY]
`)],-1),y=l("pre",null,[l("code",null,`server --data-dir ./example-dir
`)],-1),x=l("p",null,[t("Used to specify the data directory used for storing Lyfebloc Network client data. Default: "),l("code",null,"./test-chain"),t(".")],-1),v=l("hr",null,null,-1),g=l("h4",null,[l("i",null,"jsonrpc")],-1),S=l("pre",null,[l("code",null,`server [--jsonrpc JSONRPC_ADDRESS]
`)],-1),D=l("pre",null,[l("code",null,`server --jsonrpc 127.0.0.1:10000
`)],-1),C=o("<p>Sets the address and port for the JSON-RPC service <code>address:port</code>.<br> If only port is defined <code>:10001</code> it will bind to all interfaces <code>0.0.0.0:10001</code>.<br> If omitted the service will bind to the default <code>address:port</code>.<br> Default address: <code>0.0.0.0:8545</code>.</p><hr><h4><i>grpc</i></h4>",3),T=l("pre",null,[l("code",null,`server [--grpc-address GRPC_ADDRESS]
`)],-1),A=l("pre",null,[l("code",null,`server --grpc-address 127.0.0.1:10001
`)],-1),P=l("p",null,[t("Sets the address and port for the gRPC service "),l("code",null,"address:port"),t(". Default address: "),l("code",null,"127.0.0.1:9632"),t(".")],-1),R=l("hr",null,null,-1),q=l("h4",null,[l("i",null,"libp2p")],-1),I=l("pre",null,[l("code",null,`server [--libp2p LIBP2P_ADDRESS]
`)],-1),k=l("pre",null,[l("code",null,`server --libp2p 127.0.0.1:10002
`)],-1),F=l("p",null,[t("Sets the address and port for the libp2p service "),l("code",null,"address:port"),t(". Default address: "),l("code",null,"127.0.0.1:1478"),t(".")],-1),N=l("hr",null,null,-1),O=l("h4",null,[l("i",null,"prometheus")],-1),B=l("pre",null,[l("code",null,`server [--prometheus PROMETHEUS_ADDRESS]
`)],-1),w=l("pre",null,[l("code",null,`server --prometheus 127.0.0.1:10004
`)],-1),L=l("p",null,[t("Sets the address and port for the prometheus server "),l("code",null,"address:port"),t("."),l("br"),t(" If only port is defined "),l("code",null,":5001"),t(" the service will bind to all interfaces "),l("code",null,"0.0.0.0:5001"),t("."),l("br"),t(" If omitted the service will not be started.")],-1),M=l("hr",null,null,-1),V=l("h4",null,[l("i",null,"block-gas-target")],-1),G=l("pre",null,[l("code",null,`server [--block-gas-target BLOCK_GAS_TARGET]
`)],-1),U=l("pre",null,[l("code",null,`server --block-gas-target 10000000
`)],-1),j=l("p",null,[t("Sets the target block gas limit for the chain. Default (not enforced): "),l("code",null,"0"),t(".")],-1),H=l("p",null,[t("A more detailed explanation on the block gas target can be found in the "),l("a",{href:"/docs/architecture/modules/txpool#block-gas-target"},"TxPool section"),t(".")],-1),z=l("hr",null,null,-1),J=l("h4",null,[l("i",null,"max-peers")],-1),K=l("pre",null,[l("code",null,`server [--max-peers PEER_COUNT]
`)],-1),X=l("pre",null,[l("code",null,`server --max-peers 40
`)],-1),W=l("p",null,[t("Sets the client's maximum peer count. Default: "),l("code",null,"40"),t(".")],-1),Y=l("p",null,[t("Peer limit should be specified either by using "),l("code",null,"max-peers"),t(" or "),l("code",null,"max-inbound/outbound-peers"),t(" flag.")],-1),Z=l("hr",null,null,-1),$=l("h4",null,[l("i",null,"max-inbound-peers")],-1),Q=l("pre",null,[l("code",null,`server [--max-inbound-peers PEER_COUNT]
`)],-1),ll=l("pre",null,[l("code",null,`server --max-inbound-peers 32
`)],-1),el=l("p",null,[t("Sets the client's maximum inbound peer count. If "),l("code",null,"max-peers"),t(" is set, max-inbound-peer limit is calculated using the following formulae.")],-1),sl=l("p",null,[l("code",null,"max-inbound-peer = InboundRatio * max-peers"),t(", where "),l("code",null,"InboundRatio"),t(" is "),l("code",null,"0.8"),t(".")],-1),nl=l("hr",null,null,-1),tl=l("h4",null,[l("i",null,"max-outbound-peers")],-1),al=l("pre",null,[l("code",null,`server [--max-outbound-peers PEER_COUNT]
`)],-1),ol=l("pre",null,[l("code",null,`server --max-outbound-peers 8
`)],-1),ul=l("p",null,[t("Sets the client's maximum outbound peer count. If "),l("code",null,"max-peers"),t(" is set, max-outbound-peer count is calculated using the following formulae.")],-1),dl=l("p",null,[l("code",null,"max-outbound-peer = OutboundRatio * max-peers"),t(", where "),l("code",null,"OutboundRatio"),t(" is "),l("code",null,"0.2"),t(".")],-1),cl=l("hr",null,null,-1),rl=l("h4",null,[l("i",null,"log-level")],-1),pl=l("pre",null,[l("code",null,`server [--log-level LOG_LEVEL]
`)],-1),il=l("pre",null,[l("code",null,`server --log-level DEBUG
`)],-1),_l=l("p",null,[t("Sets the log level for console output. Default: "),l("code",null,"INFO"),t(".")],-1),hl=l("hr",null,null,-1),fl=l("h4",null,[l("i",null,"log-to")],-1),ml=l("pre",null,[l("code",null,`server [--log-to LOG_FILE]
`)],-1),bl=l("pre",null,[l("code",null,`server --log-to node.log
`)],-1),El=l("p",null,"Defines log file name that will hold all log output from the server command. By default, all server logs will be outputted to console (stdout), but if the flag is set, there will be no output to the console when running server command.",-1),yl=l("hr",null,null,-1),xl=l("h4",null,[l("i",null,"chain")],-1),vl=l("pre",null,[l("code",null,`server [--chain GENESIS_FILE]
`)],-1),gl=l("pre",null,[l("code",null,`server --chain /home/ubuntu/genesis.json
`)],-1),Sl=l("p",null,[t("Specifies the genesis file used for starting the chain. Default: "),l("code",null,"./genesis.json"),t(".")],-1),Dl=l("hr",null,null,-1),Cl=l("h4",null,[l("i",null,"join")],-1),Tl=l("pre",null,[l("code",null,`server [--join JOIN_ADDRESS]
`)],-1),Al=l("pre",null,[l("code",null,`server --join /ip4/127.0.0.1/tcp/10001/p2p/16Uiu2HAmJxxH1tScDX2rLGSU9exnuvZKNM9SoK3v315azp68DLPW
`)],-1),Pl=l("p",null,"Specifies the address of the peer that should be joined.",-1),Rl=l("hr",null,null,-1),ql=l("h4",null,[l("i",null,"nat")],-1),Il=l("pre",null,[l("code",null,`server [--nat NAT_ADDRESS]
`)],-1),kl=l("pre",null,[l("code",null,`server --nat 192.0.2.1
`)],-1),Fl=l("p",null,"Sets the external IP address without the port, as it can be seen by peers.",-1),Nl=l("hr",null,null,-1),Ol=l("h4",null,[l("i",null,"dns")],-1),Bl=l("pre",null,[l("code",null,`server [--dns DNS_ADDRESS]
`)],-1),wl=l("pre",null,[l("code",null,`server --dns dns4/example.io
`)],-1),Ll=l("p",null,[t("Sets the host DNS address. This can be used to advertise an external DNS. Supports "),l("code",null,"dns"),t(","),l("code",null,"dns4"),t(","),l("code",null,"dns6"),t(".")],-1),Ml=l("hr",null,null,-1),Vl=l("h4",null,[l("i",null,"price-limit")],-1),Gl=l("pre",null,[l("code",null,`server [--price-limit PRICE_LIMIT]
`)],-1),Ul=l("pre",null,[l("code",null,`server --price-limit 10000
`)],-1),jl=l("p",null,[t("Sets minimum gas price limit to enforce for acceptance into the pool. Default: "),l("code",null,"1"),t(".")],-1),Hl=l("hr",null,null,-1),zl=l("h4",null,[l("i",null,"max-slots")],-1),Jl=l("pre",null,[l("code",null,`server [--max-slots MAX_SLOTS]
`)],-1),Kl=l("pre",null,[l("code",null,`server --max-slots 1024
`)],-1),Xl=l("p",null,[t("Sets maximum slots in the pool. Default: "),l("code",null,"4096"),t(".")],-1),Wl=l("hr",null,null,-1),Yl=l("h4",null,[l("i",null,"config")],-1),Zl=l("pre",null,[l("code",null,`server [--config CLI_CONFIG_PATH]
`)],-1),$l=l("pre",null,[l("code",null,`server --config ./myConfig.json
`)],-1),Ql=l("p",null,[t("Specifies the path to the CLI config. Supports "),l("code",null,".json"),t(".")],-1),le=l("hr",null,null,-1),ee=l("h4",null,[l("i",null,"secrets-config")],-1),se=l("pre",null,[l("code",null,`server [--secrets-config SECRETS_CONFIG]
`)],-1),ne=l("pre",null,[l("code",null,`server --secrets-config ./secretsManagerConfig.json
`)],-1),te=l("p",null,"Sets the path to the SecretsManager config file. Used for Hashicorp Vault, AWS SSM and GCP Secrets Manager. If omitted, the local FS secrets manager is used.",-1),ae=l("hr",null,null,-1),oe=l("h4",null,[l("i",null,"dev")],-1),ue=l("pre",null,[l("code",null,`server [--dev DEV_MODE]
`)],-1),de=l("pre",null,[l("code",null,`server --dev
`)],-1),ce=l("p",null,[t("Sets the client to dev mode. Default: "),l("code",null,"false"),t(".")],-1),re=l("hr",null,null,-1),pe=l("h4",null,[l("i",null,"dev-interval")],-1),ie=l("pre",null,[l("code",null,`server [--dev-interval DEV_INTERVAL]
`)],-1),_e=l("pre",null,[l("code",null,`server --dev-interval 20
`)],-1),he=l("p",null,[t("Sets the client's dev notification interval in seconds. Default: "),l("code",null,"0"),t(".")],-1),fe=l("hr",null,null,-1),me=l("h4",null,[l("i",null,"no-discover")],-1),be=l("pre",null,[l("code",null,`server [--no-discover NO_DISCOVER]
`)],-1),Ee=l("pre",null,[l("code",null,`server --no-discover
`)],-1),ye=l("p",null,[t("Prevents the client from discovering other peers. Default: "),l("code",null,"false"),t(".")],-1),xe=l("hr",null,null,-1),ve=l("h4",null,[l("i",null,"restore")],-1),ge=l("pre",null,[l("code",null,`server [--restore RESTORE]
`)],-1),Se=l("pre",null,[l("code",null,`server --restore backup.dat
`)],-1),De=l("p",null,"Restore blocks from the specified archive file",-1),Ce=l("hr",null,null,-1),Te=l("h4",null,[l("i",null,"block-time")],-1),Ae=l("pre",null,[l("code",null,`server [--block-time BLOCK_TIME]
`)],-1),Pe=l("pre",null,[l("code",null,`server --block-time 1000
`)],-1),Re=l("p",null,[t("Sets block production time in seconds. Default: "),l("code",null,"2")],-1),qe=l("hr",null,null,-1),Ie=l("h4",null,[l("i",null,"ibft-base-timeout")],-1),ke=l("pre",null,[l("code",null,`server [--ibft-base-timeout IBFT_BASE_TIMEOUT]
`)],-1),Fe=l("pre",null,[l("code",null,`server --ibft-base-timeout 10
`)],-1),Ne=l("p",null,[t("Sets the base value of timeout on IBFT consensus."),l("br"),t(" IBFT consensus timeout is calculated by "),l("code",null,"BaseTimeout + 2^(round)"),t(", or "),l("code",null,"BaseTimeout * 30"),t(" where round exceeds 8."),l("br"),t(" It needs to be larger than block time and "),l("code",null,"BlockTime * 5"),t(" is set if it's not specified.")],-1),Oe=l("hr",null,null,-1),Be=l("h4",null,[l("i",null,"access-control-allow-origins")],-1),we=l("pre",null,[l("code",null,`server [--access-control-allow-origins ACCESS_CONTROL_ALLOW_ORIGINS]
`)],-1),Le=l("pre",null,[l("code",null,`server --access-control-allow-origins "https://lyfebloc-core-docs.techaroha.com"
`)],-1),Me=o('<p>Sets the authorized domains to be able to share responses from JSON-RPC requests.<br> Add multiple flags <code>--access-control-allow-origins &quot;https://example1.com&quot; --access-control-allow-origins &quot;https://example2.com&quot;</code> to authorize multiple domains.<br> If omitted Access-Control-Allow-Origins header will be set to <code>*</code> and all domains will be authorized.</p><hr><h3 id="genesis-flags" tabindex="-1">genesis flags <a class="header-anchor" href="#genesis-flags" aria-label="Permalink to &quot;genesis flags&quot;">​</a></h3><h4><i>dir</i></h4>',4),Ve=l("pre",null,[l("code",null,`genesis [--dir DIRECTORY]
`)],-1),Ge=l("pre",null,[l("code",null,`genesis --dir ./genesis.json
`)],-1),Ue=l("p",null,[t("Sets the directory for Lyfebloc Network genesis data. Default: "),l("code",null,"./genesis.json"),t(".")],-1),je=l("hr",null,null,-1),He=l("h4",null,[l("i",null,"name")],-1),ze=l("pre",null,[l("code",null,`genesis [--name NAME]
`)],-1),Je=l("pre",null,[l("code",null,`genesis --name test-chain
`)],-1),Ke=l("p",null,[t("Sets the name for the chain. Default: "),l("code",null,"polyton-edge"),t(".")],-1),Xe=l("hr",null,null,-1),We=l("h4",null,[l("i",null,"pos")],-1),Ye=l("pre",null,[l("code",null,`genesis [--pos IS_POS]
`)],-1),Ze=l("pre",null,[l("code",null,`genesis --pos
`)],-1),$e=l("p",null,[t("Sets the flag indicating that the client should use Proof of Stake IBFT. Defaults to Proof of Authority if flag is not provided or "),l("code",null,"false"),t(".")],-1),Qe=l("hr",null,null,-1),ls=l("h4",null,[l("i",null,"epoch-size")],-1),es=l("pre",null,[l("code",null,`genesis [--epoch-size EPOCH_SIZE]
`)],-1),ss=l("pre",null,[l("code",null,`genesis --epoch-size 50
`)],-1),ns=l("p",null,[t("Sets the epoch size for the chain. Default "),l("code",null,"100000"),t(".")],-1),ts=l("hr",null,null,-1),as=l("h4",null,[l("i",null,"premine")],-1),os=l("pre",null,[l("code",null,`genesis [--premine ADDRESS:VALUE]
`)],-1),us=l("pre",null,[l("code",null,`genesis --premine 0x3956E90e632AEbBF34DEB49b71c28A83Bc029862:1000000000000000000000
`)],-1),ds=l("p",null,[t("Sets the premined accounts and balances in the format "),l("code",null,"address:amount"),t(". The amount can be in either decimal or hex. Default premined balance: "),l("code",null,"0x3635C9ADC5DEA00000"),t(".")],-1),cs=l("hr",null,null,-1),rs=l("h4",null,[l("i",null,"chainid")],-1),ps=l("pre",null,[l("code",null,`genesis [--chain-id CHAIN_ID]
`)],-1),is=l("pre",null,[l("code",null,`genesis --chain-id 200
`)],-1),_s=l("p",null,[t("Sets the ID of the chain. Default: "),l("code",null,"100"),t(".")],-1),hs=l("hr",null,null,-1),fs=l("h4",null,[l("i",null,"ibft-validators-prefix-path")],-1),ms=l("pre",null,[l("code",null,`genesis [--ibft-validators-prefix-path IBFT_VALIDATORS_PREFIX_PATH]
`)],-1),bs=l("pre",null,[l("code",null,`genesis --ibft-validators-prefix-path test-chain-
`)],-1),Es=l("p",null,[t("Prefix path for validator folder directory. Needs to be present if the flag "),l("code",null,"ibft-validator"),t(" is omitted.")],-1),ys=l("hr",null,null,-1),xs=l("h4",null,[l("i",null,"ibft-validator")],-1),vs=l("pre",null,[l("code",null,`genesis [--ibft-validator IBFT_VALIDATOR_LIST]
`)],-1),gs=l("pre",null,[l("code",null,`genesis --ibft-validator 0xC12bB5d97A35c6919aC77C709d55F6aa60436900
`)],-1),Ss=l("p",null,[t("Sets passed in addresses as IBFT validators. Needs to be present if the flag "),l("code",null,"ibft-validators-prefix-path"),t(" is omitted.")],-1),Ds=l("hr",null,null,-1),Cs=l("h4",null,[l("i",null,"block-gas-limit")],-1),Ts=l("pre",null,[l("code",null,`genesis [--block-gas-limit BLOCK_GAS_LIMIT]
`)],-1),As=l("pre",null,[l("code",null,`genesis --block-gas-limit 5000000
`)],-1),Ps=l("p",null,[t("Refers to the maximum amount of gas used by all operations in a block. Default: "),l("code",null,"5242880"),t(".")],-1),Rs=l("hr",null,null,-1),qs=l("h4",null,[l("i",null,"consensus")],-1),Is=l("pre",null,[l("code",null,`genesis [--consensus CONSENSUS_PROTOCOL]
`)],-1),ks=l("pre",null,[l("code",null,`genesis --consensus ibft
`)],-1),Fs=l("p",null,[t("Sets consensus protocol. Default: "),l("code",null,"pow"),t(".")],-1),Ns=l("hr",null,null,-1),Os=l("h4",null,[l("i",null,"bootnode")],-1),Bs=l("pre",null,[l("code",null,`genesis [--bootnode BOOTNODE_URL]
`)],-1),ws=l("pre",null,[l("code",null,`genesis --bootnode /ip4/127.0.0.1/tcp/10001/p2p/16Uiu2HAmJxxH1tScDX2rLGSU9exnuvZKNM9SoK3v315azp68DLPW
`)],-1),Ls=l("p",null,"Multiaddr URL for p2p discovery bootstrap. This flag can be used multiple times. Instead of an IP address, the DNS address of the bootnode can be provided.",-1),Ms=l("hr",null,null,-1),Vs=l("h4",null,[l("i",null,"max-validator-count")],-1),Gs=l("pre",null,[l("code",null,`genesis [--max-validator-count MAX_VALIDATOR_COUNT]
`)],-1),Us=l("pre",null,[l("code",null,`genesis --max-validator-count 42
`)],-1),js=l("p",null,"The maximum number of stakers able to join the validator set in a PoS consensus. This number cannot exceed the value of MAX_SAFE_INTEGER (2^53 - 2).",-1),Hs=l("hr",null,null,-1),zs=l("h4",null,[l("i",null,"min-validator-count")],-1),Js=l("pre",null,[l("code",null,`genesis [--min-validator-count MIN_VALIDATOR_COUNT]
`)],-1),Ks=l("pre",null,[l("code",null,`genesis --min-validator-count 4
`)],-1),Xs=o('<p>The minimum number of stakers needed to join the validator set in a PoS consensus. This number cannot exceed the value of max-validator-count. Defaults to 1.</p><hr><h2 id="operator-commands" tabindex="-1">Operator Commands <a class="header-anchor" href="#operator-commands" aria-label="Permalink to &quot;Operator Commands&quot;">​</a></h2><h3 id="peer-commands" tabindex="-1">Peer Commands <a class="header-anchor" href="#peer-commands" aria-label="Permalink to &quot;Peer Commands&quot;">​</a></h3><table><thead><tr><th><strong>Command</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>peers add</td><td>Adds a new peer using their libp2p address</td></tr><tr><td>peers list</td><td>Lists all the peers the client is connected to through libp2p</td></tr><tr><td>peers status</td><td>Returns the status of a specific peer from the peers list, using the libp2p address</td></tr></tbody></table><h3>peers add flags</h3><h4><i>addr</i></h4>',7),Ws=l("pre",null,[l("code",null,`peers add --addr PEER_ADDRESS
`)],-1),Ys=l("pre",null,[l("code",null,`peers add --addr /ip4/127.0.0.1/tcp/10001/p2p/16Uiu2HAmJxxH1tScDX2rLGSU9exnuvZKNM9SoK3v315azp68DLPW
`)],-1),Zs=l("p",null,"Peer's libp2p address in the multiaddr format.",-1),$s=l("hr",null,null,-1),Qs=l("h4",null,[l("i",null,"grpc-address")],-1),ln=l("pre",null,[l("code",null,`peers add [--grpc-address GRPC_ADDRESS]
`)],-1),en=l("pre",null,[l("code",null,`peers add --grpc-address 127.0.0.1:10003
`)],-1),sn=l("p",null,[t("Address of the gRPC API. Default: "),l("code",null,"127.0.0.1:9632"),t(".")],-1),nn=l("h3",null,"peers list flags",-1),tn=l("h4",null,[l("i",null,"grpc-address")],-1),an=l("pre",null,[l("code",null,`peers list [--grpc-address GRPC_ADDRESS]
`)],-1),on=l("pre",null,[l("code",null,`peers list --grpc-address 127.0.0.1:10003
`)],-1),un=l("p",null,[t("Address of the gRPC API. Default: "),l("code",null,"127.0.0.1:9632"),t(".")],-1),dn=l("h3",null,"peers status flags",-1),cn=l("h4",null,[l("i",null,"peer-id")],-1),rn=l("pre",null,[l("code",null,`peers status --peer-id PEER_ID
`)],-1),pn=l("pre",null,[l("code",null,`peers status --peer-id 16Uiu2HAmJxxH1tScDX2rLGSU9exnuvZKNM9SoK3v315azp68DLPW
`)],-1),_n=l("p",null,"Libp2p node ID of a specific peer within p2p network.",-1),hn=l("hr",null,null,-1),fn=l("h4",null,[l("i",null,"grpc-address")],-1),mn=l("pre",null,[l("code",null,`peers status [--grpc-address GRPC_ADDRESS]
`)],-1),bn=l("pre",null,[l("code",null,`peers status --grpc-address 127.0.0.1:10003
`)],-1),En=o('<p>Address of the gRPC API. Default: <code>127.0.0.1:9632</code>.</p><h3 id="ibft-commands" tabindex="-1">IBFT Commands <a class="header-anchor" href="#ibft-commands" aria-label="Permalink to &quot;IBFT Commands&quot;">​</a></h3><table><thead><tr><th><strong>Command</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>ibft snapshot</td><td>Returns the IBFT snapshot</td></tr><tr><td>ibft candidates</td><td>Queries the current set of proposed candidates, as well as candidates that have not been included yet</td></tr><tr><td>ibft propose</td><td>Proposes a new candidate to be added/removed from the validator set</td></tr><tr><td>ibft status</td><td>Returns the overall status of the IBFT client</td></tr><tr><td>ibft switch</td><td>Add fork configurations into genesis.json file to switch IBFT type</td></tr></tbody></table><h3>ibft snapshot flags</h3><h4><i>number</i></h4>',5),yn=l("pre",null,[l("code",null,`ibft snapshot [--number BLOCK_NUMBER]
`)],-1),xn=l("pre",null,[l("code",null,`ibft snapshot --number 100
`)],-1),vn=l("p",null,"The block height (number) for the snapshot.",-1),gn=l("hr",null,null,-1),Sn=l("h4",null,[l("i",null,"grpc-address")],-1),Dn=l("pre",null,[l("code",null,`ibft snapshot [--grpc-address GRPC_ADDRESS]
`)],-1),Cn=l("pre",null,[l("code",null,`ibft snapshot --grpc-address 127.0.0.1:10003
`)],-1),Tn=l("p",null,[t("Address of the gRPC API. Default: "),l("code",null,"127.0.0.1:9632"),t(".")],-1),An=l("h3",null,"ibft candidates flags",-1),Pn=l("h4",null,[l("i",null,"grpc-address")],-1),Rn=l("pre",null,[l("code",null,`ibft candidates [--grpc-address GRPC_ADDRESS]
`)],-1),qn=l("pre",null,[l("code",null,`ibft candidates --grpc-address 127.0.0.1:10003
`)],-1),In=l("p",null,[t("Address of the gRPC API. Default: "),l("code",null,"127.0.0.1:9632"),t(".")],-1),kn=l("h3",null,"ibft propose flags",-1),Fn=l("h4",null,[l("i",null,"vote")],-1),Nn=l("pre",null,[l("code",null,`ibft propose --vote VOTE
`)],-1),On=l("pre",null,[l("code",null,`ibft propose --vote auth
`)],-1),Bn=l("p",null,[t("Proposes a change to the validator set. Possible values: "),l("code",null,"[auth, drop]"),t(".")],-1),wn=l("hr",null,null,-1),Ln=l("h4",null,[l("i",null,"addr")],-1),Mn=l("pre",null,[l("code",null,`ibft propose --addr ETH_ADDRESS
`)],-1),Vn=l("pre",null,[l("code",null,`ibft propose --addr 0x89205A3A3b2A69De6Dbf7f01ED13B2108B2c43e7
`)],-1),Gn=l("p",null,"Address of the account to be voted for.",-1),Un=l("hr",null,null,-1),jn=l("h4",null,[l("i",null,"grpc-address")],-1),Hn=l("pre",null,[l("code",null,`ibft candidates [--grpc-address GRPC_ADDRESS]
`)],-1),zn=l("pre",null,[l("code",null,`ibft candidates --grpc-address 127.0.0.1:10003
`)],-1),Jn=l("p",null,[t("Address of the gRPC API. Default: "),l("code",null,"127.0.0.1:9632"),t(".")],-1),Kn=l("h3",null,"ibft status flags",-1),Xn=l("h4",null,[l("i",null,"grpc-address")],-1),Wn=l("pre",null,[l("code",null,`ibft status [--grpc-address GRPC_ADDRESS]
`)],-1),Yn=l("pre",null,[l("code",null,`ibft status --grpc-address 127.0.0.1:10003
`)],-1),Zn=l("p",null,[t("Address of the gRPC API. Default: "),l("code",null,"127.0.0.1:9632"),t(".")],-1),$n=l("h3",null,"ibft switch flags",-1),Qn=l("h4",null,[l("i",null,"chain")],-1),lt=l("pre",null,[l("code",null,`ibft switch [--chain GENESIS_FILE]
`)],-1),et=l("pre",null,[l("code",null,`ibft switch --chain genesis.json
`)],-1),st=l("p",null,[t("Specifies the genesis file to update. Default: "),l("code",null,"test"),t(".")],-1),nt=l("hr",null,null,-1),tt=l("h4",null,[l("i",null,"type")],-1),at=l("pre",null,[l("code",null,`ibft switch [--type TYPE]
`)],-1),ot=l("pre",null,[l("code",null,`ibft switch --type PoS
`)],-1),ut=l("p",null,[t("Specifies the IBFT type to switch. Possible values: "),l("code",null,"[PoA, PoS]"),t(".")],-1),dt=l("hr",null,null,-1),ct=l("h4",null,[l("i",null,"deployment")],-1),rt=l("pre",null,[l("code",null,`ibft switch [--deployment DEPLOYMENT]
`)],-1),pt=l("pre",null,[l("code",null,`ibft switch --deployment 100
`)],-1),it=l("p",null,"Specifies the height of contract deployment. Only available with PoS.",-1),_t=l("hr",null,null,-1),ht=l("h4",null,[l("i",null,"from")],-1),ft=l("pre",null,[l("code",null,`ibft switch [--from FROM]
`)],-1),mt=l("pre",null,[l("code",null,`ibft switch --from 200
`)],-1),bt=l("hr",null,null,-1),Et=l("h4",null,[l("i",null,"max-validator-count")],-1),yt=l("pre",null,[l("code",null,`ibft switch [--max-validator-count MAX_VALIDATOR_COUNT]
`)],-1),xt=l("pre",null,[l("code",null,`ibft switch --max-validator-count 42
`)],-1),vt=l("p",null,"The maximum number of stakers able to join the validator set in a PoS consensus. This number cannot exceed the value of MAX_SAFE_INTEGER (2^53 - 2).",-1),gt=l("hr",null,null,-1),St=l("h4",null,[l("i",null,"min-validator-count")],-1),Dt=l("pre",null,[l("code",null,`ibft switch [--min-validator-count MIN_VALIDATOR_COUNT]
`)],-1),Ct=l("pre",null,[l("code",null,`bft switch --min-validator-count 4
`)],-1),Tt=o('<p>The minimum number of stakers needed to join the validator set in a PoS consensus. This number cannot exceed the value of max-validator-count. Defaults to 1.</p><p>Specifies the beginning height of the fork.</p><h3 id="transaction-pool-commands" tabindex="-1">Transaction Pool Commands <a class="header-anchor" href="#transaction-pool-commands" aria-label="Permalink to &quot;Transaction Pool Commands&quot;">​</a></h3><table><thead><tr><th><strong>Command</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>txpool status</td><td>Returns the number of transactions in the pool</td></tr><tr><td>txpool subscribe</td><td>Subscribes for events in the transaction pool</td></tr></tbody></table><h3>txpool status flags</h3><h4><i>grpc-address</i></h4>',6),At=l("pre",null,[l("code",null,`txpool status [--grpc-address GRPC_ADDRESS]
`)],-1),Pt=l("pre",null,[l("code",null,`txpool status --grpc-address 127.0.0.1:10003
`)],-1),Rt=l("p",null,[t("Address of the gRPC API. Default: "),l("code",null,"127.0.0.1:9632"),t(".")],-1),qt=l("h3",null,"txpool subscribe flags",-1),It=l("h4",null,[l("i",null,"grpc-address")],-1),kt=l("pre",null,[l("code",null,`txpool subscribe [--grpc-address GRPC_ADDRESS]
`)],-1),Ft=l("pre",null,[l("code",null,`txpool subscribe --grpc-address 127.0.0.1:10003
`)],-1),Nt=l("p",null,[t("Address of the gRPC API. Default: "),l("code",null,"127.0.0.1:9632"),t(".")],-1),Ot=l("hr",null,null,-1),Bt=l("h4",null,[l("i",null,"promoted")],-1),wt=l("pre",null,[l("code",null,`txpool subscribe [--promoted LISTEN_PROMOTED]
`)],-1),Lt=l("pre",null,[l("code",null,`txpool subscribe --promoted
`)],-1),Mt=l("p",null,"Subscribes for promoted tx events in the TxPool.",-1),Vt=l("hr",null,null,-1),Gt=l("h4",null,[l("i",null,"dropped")],-1),Ut=l("pre",null,[l("code",null,`txpool subscribe [--dropped LISTEN_DROPPED]
`)],-1),jt=l("pre",null,[l("code",null,`txpool subscribe --dropped
`)],-1),Ht=l("p",null,"Subscribes for dropped tx events in the TxPool.",-1),zt=l("hr",null,null,-1),Jt=l("h4",null,[l("i",null,"demoted")],-1),Kt=l("pre",null,[l("code",null,`txpool subscribe [--demoted LISTEN_DEMOTED]
`)],-1),Xt=l("pre",null,[l("code",null,`txpool subscribe --demoted
`)],-1),Wt=l("p",null,"Subscribes for demoted tx events in the TxPool.",-1),Yt=l("hr",null,null,-1),Zt=l("h4",null,[l("i",null,"added")],-1),$t=l("pre",null,[l("code",null,`txpool subscribe [--added LISTEN_ADDED]
`)],-1),Qt=l("pre",null,[l("code",null,`txpool subscribe --added
`)],-1),la=l("p",null,"Subscribes for added tx events to the TxPool.",-1),ea=l("hr",null,null,-1),sa=l("h4",null,[l("i",null,"enqueued")],-1),na=l("pre",null,[l("code",null,`txpool subscribe [--enqueued LISTEN_ENQUEUED]
`)],-1),ta=l("pre",null,[l("code",null,`txpool subscribe --enqueued
`)],-1),aa=o('<p>Subscribes for enqueued tx events in the account queues.</p><hr><h3 id="blockchain-commands" tabindex="-1">Blockchain commands <a class="header-anchor" href="#blockchain-commands" aria-label="Permalink to &quot;Blockchain commands&quot;">​</a></h3><table><thead><tr><th><strong>Command</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>status</td><td>Returns the status of the client. The detailed response can be found below</td></tr><tr><td>monitor</td><td>Subscribes to a blockchain event stream. The detailed response can be found below</td></tr><tr><td>version</td><td>Returns the current version of the client</td></tr></tbody></table><h3>status flags</h3><h4><i>grpc-address</i></h4>',6),oa=l("pre",null,[l("code",null,`status [--grpc-address GRPC_ADDRESS]
`)],-1),ua=l("pre",null,[l("code",null,`status --grpc-address 127.0.0.1:10003
`)],-1),da=l("p",null,[t("Address of the gRPC API. Default: "),l("code",null,"127.0.0.1:9632"),t(".")],-1),ca=l("h3",null,"monitor flags",-1),ra=l("h4",null,[l("i",null,"grpc-address")],-1),pa=l("pre",null,[l("code",null,`monitor [--grpc-address GRPC_ADDRESS]
`)],-1),ia=l("pre",null,[l("code",null,`monitor --grpc-address 127.0.0.1:10003
`)],-1),_a=o('<p>Address of the gRPC API. Default: <code>127.0.0.1:9632</code>.</p><hr><h2 id="secrets-commands" tabindex="-1">Secrets Commands <a class="header-anchor" href="#secrets-commands" aria-label="Permalink to &quot;Secrets Commands&quot;">​</a></h2><table><thead><tr><th><strong>Command</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>secrets init</td><td>Initializes the private keys to the corresponding secrets manager</td></tr><tr><td>secrets generate</td><td>Generates a secrets manager configuration file which can be parsed by Lyfebloc Network</td></tr></tbody></table><h3 id="secrets-init-flags" tabindex="-1">secrets init flags <a class="header-anchor" href="#secrets-init-flags" aria-label="Permalink to &quot;secrets init flags&quot;">​</a></h3><h4><i>config</i></h4>',6),ha=l("pre",null,[l("code",null,`secrets init [--config SECRETS_CONFIG]
`)],-1),fa=l("pre",null,[l("code",null,`secrets init --config ./secretsManagerConfig.json
`)],-1),ma=l("p",null,"Sets the path to the SecretsManager config file. Used for Hashicorp Vault. If omitted, the local FS secrets manager is used.",-1),ba=l("hr",null,null,-1),Ea=l("h4",null,[l("i",null,"data-dir")],-1),ya=l("pre",null,[l("code",null,`secrets init [--data-dir DATA_DIRECTORY]
`)],-1),xa=l("pre",null,[l("code",null,`secrets init --data-dir ./example-dir
`)],-1),va=l("p",null,"Sets the directory for Lyfebloc Network data if the local FS is used.",-1),ga=l("h3",{id:"secrets-generate-flags",tabindex:"-1"},[t("secrets generate flags "),l("a",{class:"header-anchor",href:"#secrets-generate-flags","aria-label":'Permalink to "secrets generate flags"'},"​")],-1),Sa=l("h4",null,[l("i",null,"dir")],-1),Da=l("pre",null,[l("code",null,`secrets generate [--dir DATA_DIRECTORY]
`)],-1),Ca=l("pre",null,[l("code",null,`secrets generate --dir ./example-dir
`)],-1),Ta=l("p",null,[t("Sets the directory for the secrets manager configuration file Default: "),l("code",null,"./secretsManagerConfig.json")],-1),Aa=l("hr",null,null,-1),Pa=l("h4",null,[l("i",null,"type")],-1),Ra=l("pre",null,[l("code",null,`secrets generate [--type TYPE]
`)],-1),qa=l("pre",null,[l("code",null,`secrets generate --type hashicorp-vault
`)],-1),Ia=l("p",null,[t("Specifies the type of the secrets manager ["),l("code",null,"hashicorp-vault"),t("]. Default: "),l("code",null,"hashicorp-vault")],-1),ka=l("hr",null,null,-1),Fa=l("h4",null,[l("i",null,"token")],-1),Na=l("pre",null,[l("code",null,`secrets generate [--token TOKEN]
`)],-1),Oa=l("pre",null,[l("code",null,`secrets generate --token s.zNrXa9zF9mgrdnClM7PZ19cu
`)],-1),Ba=l("p",null,"Specifies the access token for the service",-1),wa=l("hr",null,null,-1),La=l("h4",null,[l("i",null,"server-url")],-1),Ma=l("pre",null,[l("code",null,`secrets generate [--server-url SERVER_URL]
`)],-1),Va=l("pre",null,[l("code",null,`secrets generate --server-url http://127.0.0.1:8200
`)],-1),Ga=l("p",null,"Specifies the server URL for the service",-1),Ua=l("hr",null,null,-1),ja=l("h4",null,[l("i",null,"name")],-1),Ha=l("pre",null,[l("code",null,`secrets generate [--name NODE_NAME]
`)],-1),za=l("pre",null,[l("code",null,`secrets generate --name node-1
`)],-1),Ja=l("p",null,[t("Specifies the name of the node for on-service record keeping. Default: "),l("code",null,"lyfebloc-core-node")],-1),Ka=l("hr",null,null,-1),Xa=l("h4",null,[l("i",null,"namespace")],-1),Wa=l("pre",null,[l("code",null,`secrets generate [--namespace NAMESPACE]
`)],-1),Ya=l("pre",null,[l("code",null,`secrets generate --namespace my-namespace
`)],-1),Za=o(`<p>Specifies the namespace used for the Hashicorp Vault secrets manager. Default: <code>admin</code></p><hr><h2 id="responses" tabindex="-1">Responses <a class="header-anchor" href="#responses" aria-label="Permalink to &quot;Responses&quot;">​</a></h2><h3 id="status-response" tabindex="-1">Status Response <a class="header-anchor" href="#status-response" aria-label="Permalink to &quot;Status Response&quot;">​</a></h3><p>The response object is defined using Protocol Buffers.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">message ServerStatus {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;"> network </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> genesis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Block current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> p2pAddr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    message Block {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;"> number </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> hash </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">message ServerStatus {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;"> network </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> genesis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Block current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> p2pAddr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    message Block {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> hash </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="monitor-response" tabindex="-1">Monitor Response <a class="header-anchor" href="#monitor-response" aria-label="Permalink to &quot;Monitor Response&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">message BlockchainEvent {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// The &quot;repeated&quot; keyword indicates an array</span></span>
<span class="line"><span style="color:#E1E4E8;">    repeated Header added </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    repeated Header removed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    message Header {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;"> number </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> hash </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">message BlockchainEvent {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// The &quot;repeated&quot; keyword indicates an array</span></span>
<span class="line"><span style="color:#24292E;">    repeated Header added </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    repeated Header removed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    message Header {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> hash </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="utilities" tabindex="-1">Utilities <a class="header-anchor" href="#utilities" aria-label="Permalink to &quot;Utilities&quot;">​</a></h2><h3 id="loadbot-flags" tabindex="-1">loadbot flags <a class="header-anchor" href="#loadbot-flags" aria-label="Permalink to &quot;loadbot flags&quot;">​</a></h3><h4><i>tps</i></h4>`,11),$a=l("pre",null,[l("code",null,`loadbot [--tps NUMBER_OF_TXNS_PER_SECOND]
`)],-1),Qa=l("pre",null,[l("code",null,`loadbot --tps 2000
`)],-1),lo=l("p",null,[t("The number of transactions per second to send. Default: "),l("code",null,"100"),t(".")],-1),eo=l("hr",null,null,-1),so=l("h4",null,[l("i",null,"mode")],-1),no=l("pre",null,[l("code",null,`loadbot [--mode MODE]
`)],-1),to=l("pre",null,[l("code",null,`loadbot --mode transfer
`)],-1),ao=l("p",null,[t("Sets the loadbot run mode ["),l("code",null,"transfer"),t(", "),l("code",null,"deploy"),t("]. Default: "),l("code",null,"transfer"),t(".")],-1),oo=l("hr",null,null,-1),uo=l("h4",null,[l("i",null,"chain-id")],-1),co=l("pre",null,[l("code",null,`loadbot [--chain-id CHAIN_ID]
`)],-1),ro=l("pre",null,[l("code",null,`loadbot --chain-id 100
`)],-1),po=l("p",null,[t("Sets the network chain ID for transactions. Default: "),l("code",null,"100"),t(".")],-1),io=l("hr",null,null,-1),_o=l("h4",null,[l("i",null,"gas-price")],-1),ho=l("pre",null,[l("code",null,`loadbot [--gas-price GAS_PRICE]
`)],-1),fo=l("pre",null,[l("code",null,`loadbot --gas-price 10000
`)],-1),mo=l("p",null,"The gas price that should be used for the transactions. If omitted, the average gas price is fetched from the network.",-1),bo=l("hr",null,null,-1),Eo=l("h4",null,[l("i",null,"gas-limit")],-1),yo=l("pre",null,[l("code",null,`loadbot [--gas-limit GAS_LIMIT]
`)],-1),xo=l("pre",null,[l("code",null,`loadbot --gas-limit 10000
`)],-1),vo=l("p",null,"The gas limit that should be used for the transactions. If omitted, the gas limit is estimated before starting the loadbot.",-1),go=l("hr",null,null,-1),So=l("h4",null,[l("i",null,"grpc-address")],-1),Do=l("pre",null,[l("code",null,`loadbot --grpc-address GRPC_ADDRESS
`)],-1),Co=l("pre",null,[l("code",null,`loadbot --grpc-address 127.0.0.1:9645
`)],-1),To=l("p",null,"The GRPC endpoint used to send transactions",-1),Ao=l("hr",null,null,-1),Po=l("h4",null,[l("i",null,"detailed")],-1),Ro=l("pre",null,[l("code",null,`loadbot [--detailed DETAILED]
`)],-1),qo=l("pre",null,[l("code",null,`loadbot --detailed
`)],-1),Io=l("p",null,[t("Flag indicating if the error logs should be shown. Default: "),l("code",null,"false"),t(".")],-1),ko=l("hr",null,null,-1),Fo=l("h4",null,[l("i",null,"contract")],-1),No=l("pre",null,[l("code",null,`loadbot [--contract CONTRACT_PATH]
`)],-1),Oo=l("pre",null,[l("code",null,`loadbot --contract ./myContract.json
`)],-1),Bo=l("p",null,"The path to the contract JSON artifact containing the bytecode. If omitted, a default contract is used.",-1),wo=l("hr",null,null,-1),Lo=l("h4",null,[l("i",null,"sender")],-1),Mo=l("pre",null,[l("code",null,`loadbot [--sender ADDRESS]
`)],-1),Vo=l("pre",null,[l("code",null,`loadbot --sender 0x1010101010101010101010101010101010101020
`)],-1),Go=l("p",null,"Address of the sender account.",-1),Uo=l("hr",null,null,-1),jo=l("h4",null,[l("i",null,"receiver")],-1),Ho=l("pre",null,[l("code",null,`loadbot [--receiver ADDRESS]
`)],-1),zo=l("pre",null,[l("code",null,`loadbot --receiver 0x1010101010101010101010101010101010101000
`)],-1),Jo=l("p",null,"Address of the receiver account.",-1),Ko=l("hr",null,null,-1),Xo=l("h4",null,[l("i",null,"jsonrpc")],-1),Wo=l("pre",null,[l("code",null,`loadbot [--jsonrpc ENDPOINT]
`)],-1),Yo=l("pre",null,[l("code",null,`loadbot --jsonrpc http://127.0.0.1:8545
`)],-1),Zo=l("p",null,"A JSON RPC endpoint used to send transactions.",-1),$o=l("hr",null,null,-1),Qo=l("h4",null,[l("i",null,"count")],-1),lu=l("pre",null,[l("code",null,`loadbot [--count COUNT]
`)],-1),eu=l("pre",null,[l("code",null,`loadbot --count 100
`)],-1),su=l("p",null,[t("The total number of transactions to send. Default: "),l("code",null,"1000"),t(".")],-1),nu=l("hr",null,null,-1),tu=l("h4",null,[l("i",null,"value")],-1),au=l("pre",null,[l("code",null,`loadbot [--value VALUE]
`)],-1),ou=l("pre",null,[l("code",null,`loadbot --value 10000000000000000
`)],-1),uu=l("p",null,"The value to send in each transaction.",-1),du=l("hr",null,null,-1),cu=l("h4",null,[l("i",null,"max-conns")],-1),ru=l("pre",null,[l("code",null,`loadbot [--max-conns MAX_CONNECTIONS_COUNT]
`)],-1),pu=l("pre",null,[l("code",null,`loadbot --max-conns 1000
`)],-1),iu=l("p",null,[t("Sets the maximum no.of connections allowed per host. Default: "),l("code",null,"2*tps"),t(".")],-1),_u=l("hr",null,null,-1),hu=l("h3",{id:"backup-flags",tabindex:"-1"},[t("backup flags "),l("a",{class:"header-anchor",href:"#backup-flags","aria-label":'Permalink to "backup flags"'},"​")],-1),fu=l("h4",null,[l("i",null,"grpc-address")],-1),mu=l("pre",null,[l("code",null,`backup [--grpc-address GRPC_ADDRESS]
`)],-1),bu=l("pre",null,[l("code",null,`backup --grpc-address 127.0.0.1:9632
`)],-1),Eu=l("p",null,[t("Address of the gRPC API. Default: "),l("code",null,"127.0.0.1:9632"),t(".")],-1),yu=l("hr",null,null,-1),xu=l("h4",null,[l("i",null,"out")],-1),vu=l("pre",null,[l("code",null,`backup [--out OUT]
`)],-1),gu=l("pre",null,[l("code",null,`backup --out backup.dat
`)],-1),Su=l("p",null,"Path of archive file to save.",-1),Du=l("hr",null,null,-1),Cu=l("h4",null,[l("i",null,"from")],-1),Tu=l("pre",null,[l("code",null,`from [--from FROM]
`)],-1),Au=l("pre",null,[l("code",null,`backup --from 0x0
`)],-1),Pu=l("p",null,"The beginning height of blocks in archive. Default: 0.",-1),Ru=l("hr",null,null,-1),qu=l("h4",null,[l("i",null,"to")],-1),Iu=l("pre",null,[l("code",null,`to [--to TO]
`)],-1),ku=l("pre",null,[l("code",null,`backup --to 0x2710
`)],-1),Fu=o(`<p>The end height of blocks in archive.</p><hr><h2 id="genesis-template" tabindex="-1">Genesis Template <a class="header-anchor" href="#genesis-template" aria-label="Permalink to &quot;Genesis Template&quot;">​</a></h2><p>The genesis file should be used to set the initial state of the blockchain (ex. if some accounts should have a starting balance).</p><p>The following <em>./genesis.json</em> file is generated:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;example&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;genesis&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;nonce&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0x0000000000000000&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;gasLimit&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0x0000000000001388&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;difficulty&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0x0000000000000001&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;mixHash&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;coinbase&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0x0000000000000000000000000000000000000000&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;parentHash&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;params&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;forks&quot;</span><span style="color:#E1E4E8;">: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;chainID&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;engine&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;pow&quot;</span><span style="color:#E1E4E8;">: {}</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;bootnodes&quot;</span><span style="color:#E1E4E8;">: []</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;example&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;genesis&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;nonce&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0x0000000000000000&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;gasLimit&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0x0000000000001388&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;difficulty&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0x0000000000000001&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;mixHash&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;coinbase&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0x0000000000000000000000000000000000000000&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;parentHash&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;params&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;forks&quot;</span><span style="color:#24292E;">: {},</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;chainID&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;engine&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;pow&quot;</span><span style="color:#24292E;">: {}</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;bootnodes&quot;</span><span style="color:#24292E;">: []</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="data-directory" tabindex="-1">Data Directory <a class="header-anchor" href="#data-directory" aria-label="Permalink to &quot;Data Directory&quot;">​</a></h3><p>When executing the <em>data-dir</em> flag, a <strong>test-chain</strong> folder is generated. The folder structure consists of the following sub-folders:</p><ul><li><strong>blockchain</strong> - Stores the LevelDB for blockchain objects</li><li><strong>trie</strong> - Stores the LevelDB for the Merkle tries</li><li><strong>keystore</strong> - Stores private keys for the client. This includes the libp2p private key and the sealing/validator private key</li><li><strong>consensus</strong> - Stores any consensus information that the client might need while working</li></ul><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h2><ul><li><strong><a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noreferrer">Protocol Buffers</a></strong></li></ul>`,11);function Nu(Ou,Bu,wu,Lu,Mu,Vu){const n=u("TabItem"),a=u("Tabs");return c(),r("div",null,[i,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[_]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[h]),_:1})]),_:1}),f,m,b,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[E]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[y]),_:1})]),_:1}),x,v,g,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[S]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[D]),_:1})]),_:1}),C,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[T]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[A]),_:1})]),_:1}),P,R,q,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[I]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[k]),_:1})]),_:1}),F,N,O,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[B]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[w]),_:1})]),_:1}),L,M,V,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[G]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[U]),_:1})]),_:1}),j,H,z,J,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[K]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[X]),_:1})]),_:1}),W,Y,Z,$,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Q]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[ll]),_:1})]),_:1}),el,sl,nl,tl,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[al]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[ol]),_:1})]),_:1}),ul,dl,cl,rl,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[pl]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[il]),_:1})]),_:1}),_l,hl,fl,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[ml]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[bl]),_:1})]),_:1}),El,yl,xl,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[vl]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[gl]),_:1})]),_:1}),Sl,Dl,Cl,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Tl]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Al]),_:1})]),_:1}),Pl,Rl,ql,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Il]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[kl]),_:1})]),_:1}),Fl,Nl,Ol,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Bl]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[wl]),_:1})]),_:1}),Ll,Ml,Vl,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Gl]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Ul]),_:1})]),_:1}),jl,Hl,zl,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Jl]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Kl]),_:1})]),_:1}),Xl,Wl,Yl,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Zl]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[$l]),_:1})]),_:1}),Ql,le,ee,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[se]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[ne]),_:1})]),_:1}),te,ae,oe,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[ue]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[de]),_:1})]),_:1}),ce,re,pe,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[ie]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[_e]),_:1})]),_:1}),he,fe,me,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[be]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Ee]),_:1})]),_:1}),ye,xe,ve,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[ge]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Se]),_:1})]),_:1}),De,Ce,Te,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Ae]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Pe]),_:1})]),_:1}),Re,qe,Ie,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[ke]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Fe]),_:1})]),_:1}),Ne,Oe,Be,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[we]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Le]),_:1})]),_:1}),Me,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Ve]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Ge]),_:1})]),_:1}),Ue,je,He,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[ze]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Je]),_:1})]),_:1}),Ke,Xe,We,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Ye]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Ze]),_:1})]),_:1}),$e,Qe,ls,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[es]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[ss]),_:1})]),_:1}),ns,ts,as,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[os]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[us]),_:1})]),_:1}),ds,cs,rs,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[ps]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[is]),_:1})]),_:1}),_s,hs,fs,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[ms]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[bs]),_:1})]),_:1}),Es,ys,xs,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[vs]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[gs]),_:1})]),_:1}),Ss,Ds,Cs,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Ts]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[As]),_:1})]),_:1}),Ps,Rs,qs,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Is]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[ks]),_:1})]),_:1}),Fs,Ns,Os,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Bs]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[ws]),_:1})]),_:1}),Ls,Ms,Vs,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Gs]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Us]),_:1})]),_:1}),js,Hs,zs,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Js]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Ks]),_:1})]),_:1}),Xs,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Ws]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Ys]),_:1})]),_:1}),Zs,$s,Qs,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[ln]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[en]),_:1})]),_:1}),sn,nn,tn,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[an]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[on]),_:1})]),_:1}),un,dn,cn,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[rn]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[pn]),_:1})]),_:1}),_n,hn,fn,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[mn]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[bn]),_:1})]),_:1}),En,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[yn]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[xn]),_:1})]),_:1}),vn,gn,Sn,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Dn]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Cn]),_:1})]),_:1}),Tn,An,Pn,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Rn]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[qn]),_:1})]),_:1}),In,kn,Fn,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Nn]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[On]),_:1})]),_:1}),Bn,wn,Ln,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Mn]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Vn]),_:1})]),_:1}),Gn,Un,jn,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Hn]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[zn]),_:1})]),_:1}),Jn,Kn,Xn,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Wn]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Yn]),_:1})]),_:1}),Zn,$n,Qn,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[lt]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[et]),_:1})]),_:1}),st,nt,tt,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[at]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[ot]),_:1})]),_:1}),ut,dt,ct,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[rt]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[pt]),_:1})]),_:1}),it,_t,ht,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[ft]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[mt]),_:1})]),_:1}),bt,Et,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[yt]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[xt]),_:1})]),_:1}),vt,gt,St,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Dt]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Ct]),_:1})]),_:1}),Tt,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[At]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Pt]),_:1})]),_:1}),Rt,qt,It,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[kt]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Ft]),_:1})]),_:1}),Nt,Ot,Bt,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[wt]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Lt]),_:1})]),_:1}),Mt,Vt,Gt,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Ut]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[jt]),_:1})]),_:1}),Ht,zt,Jt,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Kt]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Xt]),_:1})]),_:1}),Wt,Yt,Zt,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[$t]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Qt]),_:1})]),_:1}),la,ea,sa,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[na]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[ta]),_:1})]),_:1}),aa,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[oa]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[ua]),_:1})]),_:1}),da,ca,ra,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[pa]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[ia]),_:1})]),_:1}),_a,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[ha]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[fa]),_:1})]),_:1}),ma,ba,Ea,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[ya]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[xa]),_:1})]),_:1}),va,ga,Sa,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Da]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Ca]),_:1})]),_:1}),Ta,Aa,Pa,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Ra]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[qa]),_:1})]),_:1}),Ia,ka,Fa,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Na]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Oa]),_:1})]),_:1}),Ba,wa,La,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Ma]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Va]),_:1})]),_:1}),Ga,Ua,ja,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Ha]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[za]),_:1})]),_:1}),Ja,Ka,Xa,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Wa]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Ya]),_:1})]),_:1}),Za,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[$a]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Qa]),_:1})]),_:1}),lo,eo,so,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[no]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[to]),_:1})]),_:1}),ao,oo,uo,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[co]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[ro]),_:1})]),_:1}),po,io,_o,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[ho]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[fo]),_:1})]),_:1}),mo,bo,Eo,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[yo]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[xo]),_:1})]),_:1}),vo,go,So,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Do]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Co]),_:1})]),_:1}),To,Ao,Po,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Ro]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[qo]),_:1})]),_:1}),Io,ko,Fo,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[No]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Oo]),_:1})]),_:1}),Bo,wo,Lo,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Mo]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Vo]),_:1})]),_:1}),Go,Uo,jo,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Ho]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[zo]),_:1})]),_:1}),Jo,Ko,Xo,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Wo]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Yo]),_:1})]),_:1}),Zo,$o,Qo,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[lu]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[eu]),_:1})]),_:1}),su,nu,tu,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[au]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[ou]),_:1})]),_:1}),uu,du,cu,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[ru]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[pu]),_:1})]),_:1}),iu,_u,hu,fu,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[mu]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[bu]),_:1})]),_:1}),Eu,yu,xu,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[vu]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[gu]),_:1})]),_:1}),Su,Du,Cu,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Tu]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[Au]),_:1})]),_:1}),Pu,Ru,qu,e(a,null,{default:s(()=>[e(n,{value:"syntax",label:"Syntax",default:""},{default:s(()=>[Iu]),_:1}),e(n,{value:"example",label:"Example"},{default:s(()=>[ku]),_:1})]),_:1}),Fu])}const ju=d(p,[["render",Nu]]);export{Uu as __pageData,ju as default};
