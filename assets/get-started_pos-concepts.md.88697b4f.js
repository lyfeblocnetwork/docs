import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.1a91c06a.js";const g=JSON.parse('{"title":"Proof of Stake","description":"","frontmatter":{"id":"pos-concepts","title":"Proof of Stake","head":[["meta",{"property":"og:title","content":"Proof of Stake | Lyfebloc Docs"}],["meta",{"property":"og:description","content":"Lyfebloc Network is a highly scalable modular blockchain powering dynamic applications with extensive full-stack adaptability."}]]},"headers":[],"relativePath":"get-started/pos-concepts.md","filePath":"get-started/pos-concepts.md","lastUpdated":1739729557000}'),t={name:"get-started/pos-concepts.md"},e=o(`<h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>This section aims to give a better overview of some concepts currently present in the Proof of Stake (PoS) implementation of Lyfebloc Network.</p><p>Lyfebloc Network Proof of Stake (PoS) implementation is meant to be an alternative to the existing PoA IBFT implementation, giving node operators the ability to easily choose between the two when starting a chain.</p><h2 id="pos-features" tabindex="-1">PoS Features <a class="header-anchor" href="#pos-features" aria-label="Permalink to &quot;PoS Features&quot;">​</a></h2><p>The core logic behind the Proof of Stake implementation is situated within the <a href="https://github.com/lyfeblocnetwork/staking-contracts/blob/main/contracts/staking.sol" target="_blank" rel="noreferrer">Staking Smart Contract</a>.</p><p>This contract is pre-deployed whenever a PoS mechanism Lyfebloc Network chain is initialized, and is available on the address <code>0x0000000000000000000000000000000000001001</code> from block <code>0</code>.</p><h3 id="epochs" tabindex="-1">Epochs <a class="header-anchor" href="#epochs" aria-label="Permalink to &quot;Epochs&quot;">​</a></h3><p>Epochs are a concept introduced with the addition of PoS to Lyfebloc Network.</p><p>Epochs are considered to be a special time frame (in blocks) in which a certain set of validators can produce blocks. Their lengths are modifiable, meaning node operators can configure the length of an epoch during genesis generation.</p><p>At the end of each epoch, an <em>epoch block</em> is created, and after that event a new epoch starts. To learn more about epoch blocks, see the <a href="/docs/consensus/pos-concepts#epoch-blocks">Epoch Blocks</a> section.</p><p>Validator sets are updated at the end of each epoch. Nodes query the validator set from the Staking Smart Contract during the creation of the epoch block, and save the obtained data to local storage. This query and save cycle is repeated at the end of each epoch.</p><p>Essentially, it ensures that the Staking Smart Contract has full control over the addresses in the validator set, and leaves nodes with only 1 responsibility - to query the contract once during an epoch for fetching the latest validator set information. This alleviates the responsibility from individual nodes from taking care of validator sets.</p><h3 id="staking" tabindex="-1">Staking <a class="header-anchor" href="#staking" aria-label="Permalink to &quot;Staking&quot;">​</a></h3><p>Addresses can stake funds on the Staking Smart Contract by invoking the <code>stake</code> method, and by specifying a value for the staked amount in the transaction:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StakingContractFactory</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> ethers.</span><span style="color:#B392F0;">getContractFactory</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Staking&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> stakingContract </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> StakingContractFactory.</span><span style="color:#B392F0;">attach</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">STAKING_CONTRACT_ADDRESS</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">as</span></span>
<span class="line"><span style="color:#E1E4E8;">Staking;</span></span>
<span class="line"><span style="color:#E1E4E8;">stakingContract </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stakingContract.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(account);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">tx</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> stakingContract.</span><span style="color:#B392F0;">stake</span><span style="color:#E1E4E8;">({value: </span><span style="color:#79B8FF;">STAKE_AMOUNT</span><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StakingContractFactory</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> ethers.</span><span style="color:#6F42C1;">getContractFactory</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Staking&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> stakingContract </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> StakingContractFactory.</span><span style="color:#6F42C1;">attach</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">STAKING_CONTRACT_ADDRESS</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">as</span></span>
<span class="line"><span style="color:#24292E;">Staking;</span></span>
<span class="line"><span style="color:#24292E;">stakingContract </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stakingContract.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(account);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">tx</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> stakingContract.</span><span style="color:#6F42C1;">stake</span><span style="color:#24292E;">({value: </span><span style="color:#005CC5;">STAKE_AMOUNT</span><span style="color:#24292E;">})</span></span></code></pre></div><p>By staking funds on the Staking Smart Contract, addresses can enter the validator set and thus be able to participate in the block production process.</p><div class="info custom-block"><p class="custom-block-title">Threshold for staking</p><p>Currently, the minimum threshold for entering the validator set is staking <code>1 ETH</code></p></div><h3 id="unstaking" tabindex="-1">Unstaking <a class="header-anchor" href="#unstaking" aria-label="Permalink to &quot;Unstaking&quot;">​</a></h3><p>Addresses that have staked funds can only <strong>unstake all of their staked funds at once</strong>.</p><p>Unstaking can be invoked by calling the <code>unstake</code> method on the Staking Smart Contract:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StakingContractFactory</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> ethers.</span><span style="color:#B392F0;">getContractFactory</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Staking&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> stakingContract </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> StakingContractFactory.</span><span style="color:#B392F0;">attach</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">STAKING_CONTRACT_ADDRESS</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">as</span></span>
<span class="line"><span style="color:#E1E4E8;">Staking;</span></span>
<span class="line"><span style="color:#E1E4E8;">stakingContract </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stakingContract.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(account);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">tx</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> stakingContract.</span><span style="color:#B392F0;">unstake</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StakingContractFactory</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> ethers.</span><span style="color:#6F42C1;">getContractFactory</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Staking&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> stakingContract </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> StakingContractFactory.</span><span style="color:#6F42C1;">attach</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">STAKING_CONTRACT_ADDRESS</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">as</span></span>
<span class="line"><span style="color:#24292E;">Staking;</span></span>
<span class="line"><span style="color:#24292E;">stakingContract </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stakingContract.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(account);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">tx</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> stakingContract.</span><span style="color:#6F42C1;">unstake</span><span style="color:#24292E;">()</span></span></code></pre></div><p>After unstaking their funds, addresses are removed from the validator set on the Staking Smart Contract, and will not be considered validators during the next epoch.</p><h2 id="epoch-blocks" tabindex="-1">Epoch Blocks <a class="header-anchor" href="#epoch-blocks" aria-label="Permalink to &quot;Epoch Blocks&quot;">​</a></h2><p><strong>Epoch Blocks</strong> are a concept introduced in the PoS implementation of IBFT in Lyfebloc Network.</p><p>Essentially, epoch blocks are special blocks that contain <strong>no transactions</strong> and occur only at <strong>the end of an epoch</strong>. For example, if the <strong>epoch size</strong> is set to <code>50</code> blocks, epoch blocks would be considered to be blocks <code>50</code>, <code>100</code> , <code>150</code> and so on.</p><p>They are used to performing additional logic that shouldn&#39;t occur during regular block production.</p><p>Most importantly, they are an indication to the node that <strong>it needs to fetch the latest validator set</strong> information from the Staking Smart Contract.</p><p>After updating the validator set at the epoch block, the validator set (either changed or unchanged) is used for the subsequent <code>epochSize - 1</code> blocks, until it gets updated again by pulling the latest information from the Staking Smart Contract.</p><p>Epoch lengths (in blocks) are modifiable when generating the genesis file, by using a special flag <code>--epoch-size</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">lyfebloc-core</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">genesis</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--epoch-size</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">lyfebloc-core</span><span style="color:#24292E;"> </span><span style="color:#032F62;">genesis</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--epoch-size</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span></span></code></pre></div><p>The default size of an epoch is <code>100000</code> blocks in Lyfebloc Network.</p><h2 id="contract-pre-deployment" tabindex="-1">Contract pre-deployment <a class="header-anchor" href="#contract-pre-deployment" aria-label="Permalink to &quot;Contract pre-deployment&quot;">​</a></h2><p>Lyfebloc Network <em>pre-deploys</em> the <a href="https://github.com/lyfeblocnetwork/staking-contracts/blob/main/contracts/Staking.sol" target="_blank" rel="noreferrer">Staking Smart Contract</a> during <strong>genesis generation</strong> to the address <code>0x0000000000000000000000000000000000001001</code>.</p><p>It does so without a running EVM, by modifying the blockchain state of the Smart Contract directly, using the passed in configuration values to the genesis command.</p>`,34),l=[e];function p(c,r,i,y,d,h){return a(),n("div",null,l)}const k=s(t,[["render",p]]);export{g as __pageData,k as default};
