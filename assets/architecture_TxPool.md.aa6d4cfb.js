import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.1a91c06a.js";const o="/img/txpool-error-1.png",p="/img/txpool-error-2.png",m=JSON.parse('{"title":"TxPool","description":"","frontmatter":{"id":"txpool","title":"TxPool","head":[["meta",{"property":"og:title","content":"TxPool | Lyfebloc Docs"}],["meta",{"property":"og:description","content":"Lyfebloc Network is a highly scalable modular blockchain powering dynamic applications with extensive full-stack adaptability."}]]},"headers":[],"relativePath":"architecture/TxPool.md","filePath":"architecture/TxPool.md","lastUpdated":1739729557000}'),t={name:"architecture/TxPool.md"},e=l(`<h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The TxPool module represents the transaction pool implementation, where transactions are added from different parts of the system. The module also exposes several useful features for node operators, which are covered below.</p><h2 id="operator-commands" tabindex="-1">Operator Commands <a class="header-anchor" href="#operator-commands" aria-label="Permalink to &quot;Operator Commands&quot;">​</a></h2><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">service TxnPoolOperator {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Status returns the current status of the pool</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#79B8FF;">Status</span><span style="color:#E1E4E8;">(google.protobuf.Empty) returns (TxnPoolStatusResp);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// AddTxn adds a local transaction to the pool</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#79B8FF;">AddTxn</span><span style="color:#E1E4E8;">(AddTxnReq) returns (google.protobuf.Empty);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Subscribe subscribes for new events in the txpool</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#79B8FF;">Subscribe</span><span style="color:#E1E4E8;">(google.protobuf.Empty) returns (stream TxPoolEvent);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">service TxnPoolOperator {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Status returns the current status of the pool</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#005CC5;">Status</span><span style="color:#24292E;">(google.protobuf.Empty) returns (TxnPoolStatusResp);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// AddTxn adds a local transaction to the pool</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#005CC5;">AddTxn</span><span style="color:#24292E;">(AddTxnReq) returns (google.protobuf.Empty);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Subscribe subscribes for new events in the txpool</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#005CC5;">Subscribe</span><span style="color:#24292E;">(google.protobuf.Empty) returns (stream TxPoolEvent);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Node operators can query these GRPC endpoints, as described in the <strong><a href="/docs/get-started/cli-commands#transaction-pool-commands">CLI Commands</a></strong> section.</p><h2 id="processing-transactions" tabindex="-1">Processing Transactions <a class="header-anchor" href="#processing-transactions" aria-label="Permalink to &quot;Processing Transactions&quot;">​</a></h2><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// AddTx adds a new transaction to the pool</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">TxPool) </span><span style="color:#B392F0;">AddTx</span><span style="color:#E1E4E8;">(tx </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">types.Transaction) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> t.</span><span style="color:#79B8FF;">addImpl</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;addTxn&quot;</span><span style="color:#E1E4E8;">, tx); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// broadcast the transaction only if network is enabled</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// and we are not in dev mode</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> t.topic </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">t.dev {</span></span>
<span class="line"><span style="color:#E1E4E8;">		txn </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">proto.Txn{</span></span>
<span class="line"><span style="color:#E1E4E8;">			Raw: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">any.Any{</span></span>
<span class="line"><span style="color:#E1E4E8;">				Value: tx.</span><span style="color:#79B8FF;">MarshalRLP</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">			},</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> t.topic.</span><span style="color:#79B8FF;">Publish</span><span style="color:#E1E4E8;">(txn); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			t.logger.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to topic txn&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;err&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> t.NotifyCh </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> t.NotifyCh </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{}{}:</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">TxPool) </span><span style="color:#B392F0;">addImpl</span><span style="color:#E1E4E8;">(ctx </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, txns </span><span style="color:#F97583;">...*</span><span style="color:#E1E4E8;">types.Transaction) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(txns) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	from </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> txns[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].From</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, txn </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> txns {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// Since this is a single point of inclusion for new transactions both</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// to the promoted queue and pending queue we use this point to calculate the hash</span></span>
<span class="line"><span style="color:#E1E4E8;">		txn.</span><span style="color:#79B8FF;">ComputeHash</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> t.</span><span style="color:#79B8FF;">validateTx</span><span style="color:#E1E4E8;">(txn)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> txn.From </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> types.ZeroAddress {</span></span>
<span class="line"><span style="color:#E1E4E8;">			txn.From, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t.signer.</span><span style="color:#79B8FF;">Sender</span><span style="color:#E1E4E8;">(txn)</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;invalid sender&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">			from </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> txn.From</span></span>
<span class="line"><span style="color:#E1E4E8;">		} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// only if we are in dev mode we can accept</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// a transaction without validation</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">t.dev {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cannot accept non-encrypted txn&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		t.logger.</span><span style="color:#79B8FF;">Debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;add txn&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ctx&quot;</span><span style="color:#E1E4E8;">, ctx, </span><span style="color:#9ECBFF;">&quot;hash&quot;</span><span style="color:#E1E4E8;">, txn.Hash, </span><span style="color:#9ECBFF;">&quot;from&quot;</span><span style="color:#E1E4E8;">, from)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	txnsQueue, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> t.queue[from]</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ok {</span></span>
<span class="line"><span style="color:#E1E4E8;">		stateRoot </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> t.store.</span><span style="color:#79B8FF;">Header</span><span style="color:#E1E4E8;">().StateRoot</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// initialize the txn queue for the account</span></span>
<span class="line"><span style="color:#E1E4E8;">		txnsQueue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newTxQueue</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		txnsQueue.nextNonce </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t.store.</span><span style="color:#79B8FF;">GetNonce</span><span style="color:#E1E4E8;">(stateRoot, from)</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.queue[from] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> txnsQueue</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, txn </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> txns {</span></span>
<span class="line"><span style="color:#E1E4E8;">		txnsQueue.</span><span style="color:#79B8FF;">Add</span><span style="color:#E1E4E8;">(txn)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, promoted </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> txnsQueue.</span><span style="color:#79B8FF;">Promote</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.sorted.</span><span style="color:#79B8FF;">Push</span><span style="color:#E1E4E8;">(promoted)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// AddTx adds a new transaction to the pool</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">TxPool) </span><span style="color:#6F42C1;">AddTx</span><span style="color:#24292E;">(tx </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">types.Transaction) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> t.</span><span style="color:#005CC5;">addImpl</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;addTxn&quot;</span><span style="color:#24292E;">, tx); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// broadcast the transaction only if network is enabled</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// and we are not in dev mode</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> t.topic </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">t.dev {</span></span>
<span class="line"><span style="color:#24292E;">		txn </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">proto.Txn{</span></span>
<span class="line"><span style="color:#24292E;">			Raw: </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">any.Any{</span></span>
<span class="line"><span style="color:#24292E;">				Value: tx.</span><span style="color:#005CC5;">MarshalRLP</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">			},</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> t.topic.</span><span style="color:#005CC5;">Publish</span><span style="color:#24292E;">(txn); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			t.logger.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to topic txn&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;err&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> t.NotifyCh </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> t.NotifyCh </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{}{}:</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">TxPool) </span><span style="color:#6F42C1;">addImpl</span><span style="color:#24292E;">(ctx </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, txns </span><span style="color:#D73A49;">...*</span><span style="color:#24292E;">types.Transaction) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(txns) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	from </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> txns[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].From</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, txn </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> txns {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// Since this is a single point of inclusion for new transactions both</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// to the promoted queue and pending queue we use this point to calculate the hash</span></span>
<span class="line"><span style="color:#24292E;">		txn.</span><span style="color:#005CC5;">ComputeHash</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> t.</span><span style="color:#005CC5;">validateTx</span><span style="color:#24292E;">(txn)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> txn.From </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> types.ZeroAddress {</span></span>
<span class="line"><span style="color:#24292E;">			txn.From, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t.signer.</span><span style="color:#005CC5;">Sender</span><span style="color:#24292E;">(txn)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;invalid sender&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			from </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> txn.From</span></span>
<span class="line"><span style="color:#24292E;">		} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// only if we are in dev mode we can accept</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// a transaction without validation</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">t.dev {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cannot accept non-encrypted txn&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		t.logger.</span><span style="color:#005CC5;">Debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;add txn&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ctx&quot;</span><span style="color:#24292E;">, ctx, </span><span style="color:#032F62;">&quot;hash&quot;</span><span style="color:#24292E;">, txn.Hash, </span><span style="color:#032F62;">&quot;from&quot;</span><span style="color:#24292E;">, from)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	txnsQueue, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> t.queue[from]</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ok {</span></span>
<span class="line"><span style="color:#24292E;">		stateRoot </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> t.store.</span><span style="color:#005CC5;">Header</span><span style="color:#24292E;">().StateRoot</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// initialize the txn queue for the account</span></span>
<span class="line"><span style="color:#24292E;">		txnsQueue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newTxQueue</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		txnsQueue.nextNonce </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t.store.</span><span style="color:#005CC5;">GetNonce</span><span style="color:#24292E;">(stateRoot, from)</span></span>
<span class="line"><span style="color:#24292E;">		t.queue[from] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> txnsQueue</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, txn </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> txns {</span></span>
<span class="line"><span style="color:#24292E;">		txnsQueue.</span><span style="color:#005CC5;">Add</span><span style="color:#24292E;">(txn)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, promoted </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> txnsQueue.</span><span style="color:#005CC5;">Promote</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		t.sorted.</span><span style="color:#005CC5;">Push</span><span style="color:#24292E;">(promoted)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>The <em><strong>addImpl</strong></em> method is the bread and butter of the <strong>TxPool</strong> module. It is the central place where transactions are added in the system, being called from the GRPC service, JSON RPC endpoints, and whenever the client receives a transaction through the <strong>gossip</strong> protocol.</p><p>It takes in as an argument <strong>ctx</strong>, which just denotes the context from which the transactions are being added (GRPC, JSON RPC...). <br> The other parameter is the list of transactions to be added to the pool.</p><p>The key thing to note here is the check for the <strong>From</strong> field within the transaction:</p><ul><li>If the <strong>From</strong> field is <strong>empty</strong>, it is regarded as an unencrypted/unsigned transaction. These kinds of transactions are only accepted in development mode</li><li>If the <strong>From</strong> field is <strong>not empty</strong>, that means that it&#39;s a signed transaction, so signature verification takes place</li></ul><p>After all these validations, the transactions are considered to be valid.</p><h2 id="data-structures" tabindex="-1">Data structures <a class="header-anchor" href="#data-structures" aria-label="Permalink to &quot;Data structures&quot;">​</a></h2><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// TxPool is a pool of transactions</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TxPool</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	logger hclog.Logger</span></span>
<span class="line"><span style="color:#E1E4E8;">	signer signer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	store      store</span></span>
<span class="line"><span style="color:#E1E4E8;">	idlePeriod time.Duration</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	queue </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[types.Address]</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">txQueue</span></span>
<span class="line"><span style="color:#E1E4E8;">	sorted </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">txPriceHeap</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// network stack</span></span>
<span class="line"><span style="color:#E1E4E8;">	network </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">network.Server</span></span>
<span class="line"><span style="color:#E1E4E8;">	topic   </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">network.Topic</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	sealing  </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">	dev      </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">	NotifyCh </span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	proto.UnimplementedTxnPoolOperatorServer</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// TxPool is a pool of transactions</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TxPool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	logger hclog.Logger</span></span>
<span class="line"><span style="color:#24292E;">	signer signer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	store      store</span></span>
<span class="line"><span style="color:#24292E;">	idlePeriod time.Duration</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	queue </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[types.Address]</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">txQueue</span></span>
<span class="line"><span style="color:#24292E;">	sorted </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">txPriceHeap</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// network stack</span></span>
<span class="line"><span style="color:#24292E;">	network </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">network.Server</span></span>
<span class="line"><span style="color:#24292E;">	topic   </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">network.Topic</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	sealing  </span><span style="color:#D73A49;">bool</span></span>
<span class="line"><span style="color:#24292E;">	dev      </span><span style="color:#D73A49;">bool</span></span>
<span class="line"><span style="color:#24292E;">	NotifyCh </span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	proto.UnimplementedTxnPoolOperatorServer</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>The fields in the TxPool object that can cause confusion are the <strong>queue</strong> and <strong>sorted</strong> lists.</p><ul><li><strong>queue</strong> - Heap implementation of a sorted list of account transactions (by nonce)</li><li><strong>sorted</strong> - Sorted list for all the current promoted transactions (all executable transactions). Sorted by gas price</li></ul><h2 id="gas-limit-error-management" tabindex="-1">Gas limit error management <a class="header-anchor" href="#gas-limit-error-management" aria-label="Permalink to &quot;Gas limit error management&quot;">​</a></h2><p>Whenever you submit a transaction, there are three ways it can be processed by the TxPool.</p><ol><li>All pending transactions can fit in a block</li><li>One or more pending transactions can not fit in a block</li><li>One or more pending transactions will never fit in a block</li></ol><p>Here, the word <strong><em>fit</em></strong> means that the transaction has a gas limit that is lower than the remaining gas in the TxPool.</p><p>The first scenario does not produce any error.</p><h3 id="second-scenario" tabindex="-1">Second scenario <a class="header-anchor" href="#second-scenario" aria-label="Permalink to &quot;Second scenario&quot;">​</a></h3><ul><li>The TxPool remaining gas is set to the gas limit of the last block, lets say <strong>5000</strong></li><li>A first transaction is processed and consumes <strong>3000</strong> gas of the TxPool <ul><li>The remaining gas of the TxPool is now <strong>2000</strong></li></ul></li><li>A second transaction, which is the same as the first one - they both consume 3000 units of gas, is submitted</li><li>Since the remaining gas of the TxPool is <strong>lower</strong> than the transaction gas, it cannot be processed in the current block <ul><li>It is put back into a pending transaction queue so that it can be processed in the next block</li></ul></li><li>The first block is written, lets call it <strong>block #1</strong></li><li>The TxPool remaining gas is set to the parent block - <strong>block #1</strong>&#39;s gas limit</li><li>The transaction which was put back into the TxPool pending transaction queue is now processed and written in the block <ul><li>The TxPool remaining gas is now <strong>2000</strong></li></ul></li><li>The second block is written</li><li>...</li></ul><p><img src="`+o+'" alt="TxPool Error scenario #1"></p><h3 id="third-scenario" tabindex="-1">Third scenario <a class="header-anchor" href="#third-scenario" aria-label="Permalink to &quot;Third scenario&quot;">​</a></h3><ul><li>The TxPool remaining gas is set to the gas limit of the last block, lets say <strong>5000</strong></li><li>A first transaction is processed and consumes <strong>3000</strong> gas of the TxPool <ul><li>The remaining gas of the TxPool is now <strong>2000</strong></li></ul></li><li>A second transaction, with a gas field set to <strong>6000</strong> is submitted</li><li>Since the block gas limit is <strong>lower</strong> than the transaction gas, this transaction is discarded <ul><li>It will never be able to fit in a block</li></ul></li><li>The first block is written</li><li>...</li></ul><p><img src="'+p+'" alt="TxPool Error scenario #2"></p><blockquote><p>This happens whenever you get the following error:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">2021-11-04T15:41:07.665+0100</span><span style="color:#E1E4E8;"> [ERROR] fabric.consensus.dev: failed to write transaction: transaction</span><span style="color:#9ECBFF;">&#39;s gas limit exceeds block gas limit</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">2021-11-04T15:41:07.665+0100</span><span style="color:#24292E;"> [ERROR] fabric.consensus.dev: failed to write transaction: transaction</span><span style="color:#032F62;">&#39;s gas limit exceeds block gas limit</span></span></code></pre></div></blockquote><h2 id="block-gas-target" tabindex="-1">Block Gas Target <a class="header-anchor" href="#block-gas-target" aria-label="Permalink to &quot;Block Gas Target&quot;">​</a></h2><p>There are situations when nodes want to keep the block gas limit below or at a certain target on a running chain.</p><p>The node operator can set the target gas limit on a specific node, which will try to apply this limit to newly created blocks. If the majority of the other nodes also have a similar (or same) target gas limit set, then the block gas limit will always hover around that block gas target, slowly progressing towards it (at max <code>1/1024 * parent block gas limit</code>) as new blocks are created.</p><h3 id="example-scenario" tabindex="-1">Example scenario <a class="header-anchor" href="#example-scenario" aria-label="Permalink to &quot;Example scenario&quot;">​</a></h3><ul><li>The node operator sets the block gas limit for a single node to be <code>5000</code></li><li>Other nodes are configured to be <code>5000</code> as well, apart from a single node which is configured to be <code>7000</code></li><li>When the nodes who have their gas target set to <code>5000</code> become proposers, they will check to see if the gas limit is already at the target</li><li>If the gas limit is not at the target (it is greater / lower), the proposer node will set the block gas target to at most (1/1024 * parent gas limit) in the direction of the target <ol><li>Ex: <code>parentGasLimit = 4500</code> and <code>blockGasTarget = 5000</code>, the proposer will calculate the gas limit for the new block as <code>4504.39453125</code> (<code>4500/1024 + 4500</code>)</li><li>Ex: <code>parentGasLimit = 5500</code> and <code>blockGasTarget = 5000</code>, the proposer will calculate the gas limit for the new block as <code>5494.62890625</code> (<code>5500 - 5500/1024</code>)</li></ol></li><li>This ensures that the block gas limit in the chain will be kept at the target, because the single proposer who has the target configured to <code>7000</code> cannot advance the limit much, and the majority of the nodes who have it set at <code>5000</code> will always attempt to keep it there.</li></ul>',33),r=[e];function c(i,E,y,d,h,u){return n(),a("div",null,r)}const F=s(t,[["render",c]]);export{m as __pageData,F as default};
