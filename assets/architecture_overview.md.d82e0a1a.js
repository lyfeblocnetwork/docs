import{_ as e,o as t,c as a,Q as o}from"./chunks/framework.1a91c06a.js";const i="/Architecture.jpg",f=JSON.parse('{"title":"Architecture Overview","description":"","frontmatter":{"id":"overview","title":"Architecture Overview","sidebar_label":"Overview","head":[["meta",{"property":"og:title","content":"Architecture Overview | Lyfebloc Docs"}],["meta",{"property":"og:description","content":"Lyfebloc Network is a highly scalable modular blockchain powering dynamic applications with extensive full-stack adaptability."}]]},"headers":[],"relativePath":"architecture/overview.md","filePath":"architecture/overview.md","lastUpdated":1739729557000}'),r={name:"architecture/overview.md"},n=o('<p>We started with the idea of making software that is <em>modular</em>.</p><p>This is something that is present in almost all parts of Lyfebloc Network. Below, you will find a brief overview of the built architecture and its layering.</p><h2 id="lyfebloc-network-layering" tabindex="-1">Lyfebloc Network Layering <a class="header-anchor" href="#lyfebloc-network-layering" aria-label="Permalink to &quot;Lyfebloc Network Layering&quot;">​</a></h2><p><img src="'+i+'" alt="Lyfebloc Network Architecture"></p><h2 id="libp2p" tabindex="-1">Libp2p <a class="header-anchor" href="#libp2p" aria-label="Permalink to &quot;Libp2p&quot;">​</a></h2><p>It all starts at the base networking layer, which utilizes <strong>libp2p</strong>. We decided to go with this technology because it fits into the designing philosophies of Lyfebloc Network. Libp2p is:</p><ul><li>Modular</li><li>Extensible</li><li>Fast</li></ul><p>Most importantly, it provides a great foundation for more advanced features, which we&#39;ll cover later on.</p><h2 id="synchronization-consensus" tabindex="-1">Synchronization &amp; Consensus <a class="header-anchor" href="#synchronization-consensus" aria-label="Permalink to &quot;Synchronization &amp; Consensus&quot;">​</a></h2><p>The separation of the synchronization and consensus protocols allows for modularity and implementation of <strong>custom</strong> sync and consensus mechanisms - depending on how the client is being run.</p><p>Lyfebloc Network is designed with an off-the-shelf pluggable Proof of Stake (POS) consensus algorithm.</p><h2 id="blockchain" tabindex="-1">Blockchain <a class="header-anchor" href="#blockchain" aria-label="Permalink to &quot;Blockchain&quot;">​</a></h2><p>The Blockchain layer is the central layer that coordinates everything in Lyfebloc Network system. It is covered in depth in the corresponding <em>Modules</em> section.</p><h2 id="state" tabindex="-1">State <a class="header-anchor" href="#state" aria-label="Permalink to &quot;State&quot;">​</a></h2><p>The State inner layer contains state transition logic. It deals with how the state changes when a new block is included. It is covered in depth in the corresponding <em>Modules</em> section.</p><h2 id="json-rpc" tabindex="-1">JSON RPC <a class="header-anchor" href="#json-rpc" aria-label="Permalink to &quot;JSON RPC&quot;">​</a></h2><p>The JSON RPC layer is an API layer that dApp developers use to interact with the blockchain. It is covered in depth in the corresponding <em>Modules</em> section.</p><h2 id="txpool" tabindex="-1">TxPool <a class="header-anchor" href="#txpool" aria-label="Permalink to &quot;TxPool&quot;">​</a></h2><p>The TxPool layer represents the transaction pool, and it is closely linked with other modules in the system, as transactions can be added from multiple entry points.</p><h2 id="grpc" tabindex="-1">GRPC <a class="header-anchor" href="#grpc" aria-label="Permalink to &quot;GRPC&quot;">​</a></h2><p>The GRPC layer is vital for operator interactions. Through it, node operators can easily interact with the client, providing an enjoyable UX.</p>',21),s=[n];function l(c,h,d,p,u,b){return t(),a("div",null,s)}const y=e(r,[["render",l]]);export{f as __pageData,y as default};
