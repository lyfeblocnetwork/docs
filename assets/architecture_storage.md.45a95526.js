import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.1a91c06a.js";const d=JSON.parse('{"title":"Storage","description":"","frontmatter":{"id":"storage","title":"Storage","head":[["meta",{"property":"og:title","content":"Storage | Lyfebloc Docs"}],["meta",{"property":"og:description","content":"Lyfebloc Network is a highly scalable modular blockchain powering dynamic applications with extensive full-stack adaptability."}]]},"headers":[],"relativePath":"architecture/storage.md","filePath":"architecture/storage.md","lastUpdated":1739729557000}'),l={name:"architecture/storage.md"},o=p(`<h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">â€‹</a></h2><p>Lyfebloc Network currently utilizes <strong>LevelDB</strong> for data storage, as well as an <strong>in-memory</strong> data store.</p><p>Throughout Lyfebloc Network, when modules need to interact with the underlying data store, they don&#39;t need to know which DB engine or service they&#39;re speaking to.</p><p>The DB layer is abstracted away between a module called <strong>Storage</strong>, which exports interfaces that modules query.</p><p>Each DB layer, for now only <strong>LevelDB</strong>, implements these methods separately, making sure they fit in with their implementation.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Storage is a generic blockchain storage</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Storage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">ReadCanonicalHash</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;">) (types.Hash, </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">WriteCanonicalHash</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;">, hash types.Hash) </span><span style="color:#F97583;">error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">ReadHeadHash</span><span style="color:#E1E4E8;">() (types.Hash, </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">ReadHeadNumber</span><span style="color:#E1E4E8;">() (</span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">WriteHeadHash</span><span style="color:#E1E4E8;">(h types.Hash) </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">WriteHeadNumber</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">WriteForks</span><span style="color:#E1E4E8;">(forks []types.Hash) </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">ReadForks</span><span style="color:#E1E4E8;">() ([]types.Hash, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">WriteDiff</span><span style="color:#E1E4E8;">(hash types.Hash, diff </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">big.Int) </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">ReadDiff</span><span style="color:#E1E4E8;">(hash types.Hash) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">big.Int, </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">WriteHeader</span><span style="color:#E1E4E8;">(h </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">types.Header) </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">ReadHeader</span><span style="color:#E1E4E8;">(hash types.Hash) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">types.Header, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">WriteCanonicalHeader</span><span style="color:#E1E4E8;">(h </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">types.Header, diff </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">big.Int) </span><span style="color:#F97583;">error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">WriteBody</span><span style="color:#E1E4E8;">(hash types.Hash, body </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">types.Body) </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">ReadBody</span><span style="color:#E1E4E8;">(hash types.Hash) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">types.Body, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">WriteSnapshot</span><span style="color:#E1E4E8;">(hash types.Hash, blob []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">ReadSnapshot</span><span style="color:#E1E4E8;">(hash types.Hash) ([]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">WriteReceipts</span><span style="color:#E1E4E8;">(hash types.Hash, receipts []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">types.Receipt) </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">ReadReceipts</span><span style="color:#E1E4E8;">(hash types.Hash) ([]</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">types.Receipt, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">WriteTxLookup</span><span style="color:#E1E4E8;">(hash types.Hash, blockHash types.Hash) </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">ReadTxLookup</span><span style="color:#E1E4E8;">(hash types.Hash) (types.Hash, </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Storage is a generic blockchain storage</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Storage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">ReadCanonicalHash</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;">) (types.Hash, </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">WriteCanonicalHash</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;">, hash types.Hash) </span><span style="color:#D73A49;">error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">ReadHeadHash</span><span style="color:#24292E;">() (types.Hash, </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">ReadHeadNumber</span><span style="color:#24292E;">() (</span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">WriteHeadHash</span><span style="color:#24292E;">(h types.Hash) </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">WriteHeadNumber</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">WriteForks</span><span style="color:#24292E;">(forks []types.Hash) </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">ReadForks</span><span style="color:#24292E;">() ([]types.Hash, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">WriteDiff</span><span style="color:#24292E;">(hash types.Hash, diff </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">big.Int) </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">ReadDiff</span><span style="color:#24292E;">(hash types.Hash) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">big.Int, </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">WriteHeader</span><span style="color:#24292E;">(h </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">types.Header) </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">ReadHeader</span><span style="color:#24292E;">(hash types.Hash) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">types.Header, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">WriteCanonicalHeader</span><span style="color:#24292E;">(h </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">types.Header, diff </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">big.Int) </span><span style="color:#D73A49;">error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">WriteBody</span><span style="color:#24292E;">(hash types.Hash, body </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">types.Body) </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">ReadBody</span><span style="color:#24292E;">(hash types.Hash) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">types.Body, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">WriteSnapshot</span><span style="color:#24292E;">(hash types.Hash, blob []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">ReadSnapshot</span><span style="color:#24292E;">(hash types.Hash) ([]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">WriteReceipts</span><span style="color:#24292E;">(hash types.Hash, receipts []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">types.Receipt) </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">ReadReceipts</span><span style="color:#24292E;">(hash types.Hash) ([]</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">types.Receipt, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">WriteTxLookup</span><span style="color:#24292E;">(hash types.Hash, blockHash types.Hash) </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">ReadTxLookup</span><span style="color:#24292E;">(hash types.Hash) (types.Hash, </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="leveldb" tabindex="-1">LevelDB <a class="header-anchor" href="#leveldb" aria-label="Permalink to &quot;LevelDB&quot;">â€‹</a></h2><h3 id="prefixes" tabindex="-1">Prefixes <a class="header-anchor" href="#prefixes" aria-label="Permalink to &quot;Prefixes&quot;">â€‹</a></h3><p>In order to make querying the LevelDB storage deterministic, and to avoid key storage clashing, Lyfebloc Network leverages prefixes and sub-prefixes when storing data</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Prefixes for the key-value store</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// DIFFICULTY is the difficulty prefix</span></span>
<span class="line"><span style="color:#E1E4E8;">	DIFFICULTY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;d&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// HEADER is the header prefix</span></span>
<span class="line"><span style="color:#E1E4E8;">	HEADER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;h&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// HEAD is the chain head prefix</span></span>
<span class="line"><span style="color:#E1E4E8;">	HEAD </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;o&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// FORK is the entry to store forks</span></span>
<span class="line"><span style="color:#E1E4E8;">	FORK </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;f&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// CANONICAL is the prefix for the canonical chain numbers</span></span>
<span class="line"><span style="color:#E1E4E8;">	CANONICAL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;c&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// BODY is the prefix for bodies</span></span>
<span class="line"><span style="color:#E1E4E8;">	BODY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// RECEIPTS is the prefix for receipts</span></span>
<span class="line"><span style="color:#E1E4E8;">	RECEIPTS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;r&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// SNAPSHOTS is the prefix for snapshots</span></span>
<span class="line"><span style="color:#E1E4E8;">	SNAPSHOTS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;s&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// TX_LOOKUP_PREFIX is the prefix for transaction lookups</span></span>
<span class="line"><span style="color:#E1E4E8;">	TX_LOOKUP_PREFIX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;l&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Sub-prefixes</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	HASH   </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hash&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	NUMBER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;number&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	EMPTY  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;empty&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Prefixes for the key-value store</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// DIFFICULTY is the difficulty prefix</span></span>
<span class="line"><span style="color:#24292E;">	DIFFICULTY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;d&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// HEADER is the header prefix</span></span>
<span class="line"><span style="color:#24292E;">	HEADER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;h&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// HEAD is the chain head prefix</span></span>
<span class="line"><span style="color:#24292E;">	HEAD </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;o&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// FORK is the entry to store forks</span></span>
<span class="line"><span style="color:#24292E;">	FORK </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;f&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// CANONICAL is the prefix for the canonical chain numbers</span></span>
<span class="line"><span style="color:#24292E;">	CANONICAL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// BODY is the prefix for bodies</span></span>
<span class="line"><span style="color:#24292E;">	BODY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// RECEIPTS is the prefix for receipts</span></span>
<span class="line"><span style="color:#24292E;">	RECEIPTS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;r&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// SNAPSHOTS is the prefix for snapshots</span></span>
<span class="line"><span style="color:#24292E;">	SNAPSHOTS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;s&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// TX_LOOKUP_PREFIX is the prefix for transaction lookups</span></span>
<span class="line"><span style="color:#24292E;">	TX_LOOKUP_PREFIX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;l&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Sub-prefixes</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	HASH   </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hash&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	NUMBER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;number&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	EMPTY  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;empty&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="future-plans" tabindex="-1">Future Plans <a class="header-anchor" href="#future-plans" aria-label="Permalink to &quot;Future Plans&quot;">â€‹</a></h2><p>The plans for the near future include adding some of the most popular DB solutions, such as:</p><ul><li>PostgreSQL</li><li>MySQL</li></ul><h2 id="ðŸ“œ-resources" tabindex="-1">ðŸ“œ Resources <a class="header-anchor" href="#ðŸ“œ-resources" aria-label="Permalink to &quot;ðŸ“œ Resources&quot;">â€‹</a></h2><ul><li><strong><a href="https://github.com/google/leveldb" target="_blank" rel="noreferrer">LevelDB</a></strong></li></ul>`,15),e=[o];function t(r,c,y,E,i,h){return a(),n("div",null,e)}const u=s(l,[["render",t]]);export{d as __pageData,u as default};
