import{_ as e,o as t,c as o,Q as s}from"./chunks/framework.1a91c06a.js";const u=JSON.parse('{"title":"Types","description":"","frontmatter":{"id":"types","title":"Types","head":[["meta",{"property":"og:title","content":"Types | Lyfebloc Docs"}],["meta",{"property":"og:description","content":"Lyfebloc Network is a highly scalable modular blockchain powering dynamic applications with extensive full-stack adaptability."}]]},"headers":[],"relativePath":"architecture/types.md","filePath":"architecture/types.md","lastUpdated":1739729557000}'),n={name:"architecture/types.md"},a=s('<h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The <strong>Types</strong> module implements core object types, such as:</p><ul><li><strong>Address</strong></li><li><strong>Hash</strong></li><li><strong>Header</strong></li><li>lots of helper functions</li></ul><h2 id="rlp-encoding-decoding" tabindex="-1">RLP Encoding / Decoding <a class="header-anchor" href="#rlp-encoding-decoding" aria-label="Permalink to &quot;RLP Encoding / Decoding&quot;">​</a></h2><p>Unlike clients such as GETH, Lyfebloc Network doesn&#39;t use reflection for the encoding.<br> The preference was to not use reflection because it introduces new problems, such as performance degradation, and harder scaling.</p><p>The <strong>Types</strong> module provides an easy-to-use interface for RLP marshaling and unmarshalling, using the FastRLP package.</p><p>Marshaling is done through the <em>MarshalRLPWith</em> and <em>MarshalRLPTo</em> methods. The analogous methods exist for unmarshalling.</p><p>By manually defining these methods, Lyfebloc Network doesn&#39;t need to use reflection. In <em>rlp_marshal.go</em>, you can find methods for marshaling:</p><ul><li><strong>Bodies</strong></li><li><strong>Blocks</strong></li><li><strong>Headers</strong></li><li><strong>Receipts</strong></li><li><strong>Logs</strong></li><li><strong>Transactions</strong></li></ul>',9),r=[a];function i(l,c,d,h,p,g){return t(),o("div",null,r)}const f=e(n,[["render",i]]);export{u as __pageData,f as default};
