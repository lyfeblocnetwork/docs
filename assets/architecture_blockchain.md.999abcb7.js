import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.1a91c06a.js";const d=JSON.parse('{"title":"Blockchain","description":"","frontmatter":{"id":"blockchain","title":"Blockchain","head":[["meta",{"property":"og:title","content":"Blockchain | Lyfebloc Docs"}],["meta",{"property":"og:description","content":"Lyfebloc Network is a highly scalable modular blockchain powering dynamic applications with extensive full-stack adaptability."}]]},"headers":[],"relativePath":"architecture/blockchain.md","filePath":"architecture/blockchain.md","lastUpdated":1739729557000}'),p={name:"architecture/blockchain.md"},o=l(`<h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">â€‹</a></h2><p>One of the main modules of Lyfebloc Network are <strong>Blockchain</strong> and <strong>State</strong>. <br></p><p><strong>Blockchain</strong> is the powerhouse that deals with block reorganizations. This means that it deals with all the logic that happens when a new block is included in the blockchain.</p><p><strong>State</strong> represents the <em>state transition</em> object. It deals with how the state changes when a new block is included. <br> Among other things, <strong>State</strong> handles:</p><ul><li>Executing transactions</li><li>Executing the EVM</li><li>Changing the Merkle tries</li><li>Much more, which is covered in the corresponding <strong>State</strong> section ðŸ™‚</li></ul><p>The key takeaway is that these 2 parts are very connected, and they work closely together in order for the client to function. <br> For example, when the <strong>Blockchain</strong> layer receives a new block (and no reorganization occurred), it calls the <strong>State</strong> to perform a state transition.</p><p><strong>Blockchain</strong> also has to deal with some parts relating to consensus (ex. <em>is this ethHash correct?</em>, <em>is this PoW correct?</em>). <br> In one sentence, <strong>it is the main core of logic through which all blocks are included</strong>.</p><h2 id="writeblocks" tabindex="-1"><em>WriteBlocks</em> <a class="header-anchor" href="#writeblocks" aria-label="Permalink to &quot;*WriteBlocks*&quot;">â€‹</a></h2><p>One of the most important parts relating to the <strong>Blockchain</strong> layer is the <em>WriteBlocks</em> method:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// WriteBlocks writes a batch of blocks</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Blockchain) </span><span style="color:#B392F0;">WriteBlocks</span><span style="color:#E1E4E8;">(blocks []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">types.Block) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(blocks) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;no headers found to insert&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	parent, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> b.</span><span style="color:#79B8FF;">readHeader</span><span style="color:#E1E4E8;">(blocks[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#79B8FF;">ParentHash</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ok {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;parent of </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;"> (</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">) not found: </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, blocks[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#79B8FF;">Hash</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">(), blocks[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#79B8FF;">Number</span><span style="color:#E1E4E8;">(), blocks[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#79B8FF;">ParentHash</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// validate chain</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(blocks); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		block </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> blocks[i]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> block.</span><span style="color:#79B8FF;">Number</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> parent.Number {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;number sequence not correct at </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">, </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> and </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, i, block.</span><span style="color:#79B8FF;">Number</span><span style="color:#E1E4E8;">(), parent.Number)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> block.</span><span style="color:#79B8FF;">ParentHash</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> parent.Hash {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;parent hash not correct&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> b.consensus.</span><span style="color:#79B8FF;">VerifyHeader</span><span style="color:#E1E4E8;">(parent, block.Header, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to verify the header: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// verify body data</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> hash </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> buildroot.</span><span style="color:#79B8FF;">CalculateUncleRoot</span><span style="color:#E1E4E8;">(block.Uncles); hash </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> block.Header.Sha3Uncles {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;uncle root hash mismatch: have </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">, want </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, hash, block.Header.Sha3Uncles)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> hash </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> buildroot.</span><span style="color:#79B8FF;">CalculateTransactionsRoot</span><span style="color:#E1E4E8;">(block.Transactions); hash </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> block.Header.TxRoot {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;transaction root hash mismatch: have </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">, want </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, hash, block.Header.TxRoot)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> block.Header</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Write chain</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> indx, block </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> blocks {</span></span>
<span class="line"><span style="color:#E1E4E8;">		header </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> block.Header</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		body </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> block.</span><span style="color:#79B8FF;">Body</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> b.db.</span><span style="color:#79B8FF;">WriteBody</span><span style="color:#E1E4E8;">(header.Hash, block.</span><span style="color:#79B8FF;">Body</span><span style="color:#E1E4E8;">()); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		b.bodiesCache.</span><span style="color:#79B8FF;">Add</span><span style="color:#E1E4E8;">(header.Hash, body)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// Verify uncles. It requires to have the bodies on memory</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> b.</span><span style="color:#79B8FF;">VerifyUncles</span><span style="color:#E1E4E8;">(block); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// Process and validate the block</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> b.</span><span style="color:#79B8FF;">processBlock</span><span style="color:#E1E4E8;">(blocks[indx]); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// Write the header to the chain</span></span>
<span class="line"><span style="color:#E1E4E8;">		evnt </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Event{}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> b.</span><span style="color:#79B8FF;">writeHeaderImpl</span><span style="color:#E1E4E8;">(evnt, header); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		b.</span><span style="color:#79B8FF;">dispatchEvent</span><span style="color:#E1E4E8;">(evnt)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// Update the average gas price</span></span>
<span class="line"><span style="color:#E1E4E8;">		b.</span><span style="color:#79B8FF;">UpdateGasPriceAvg</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(big.Int).</span><span style="color:#79B8FF;">SetUint64</span><span style="color:#E1E4E8;">(header.GasUsed))</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// WriteBlocks writes a batch of blocks</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Blockchain) </span><span style="color:#6F42C1;">WriteBlocks</span><span style="color:#24292E;">(blocks []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">types.Block) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(blocks) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;no headers found to insert&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	parent, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> b.</span><span style="color:#005CC5;">readHeader</span><span style="color:#24292E;">(blocks[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#005CC5;">ParentHash</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ok {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;parent of </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;"> (</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">) not found: </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, blocks[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#005CC5;">Hash</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">(), blocks[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#005CC5;">Number</span><span style="color:#24292E;">(), blocks[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#005CC5;">ParentHash</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// validate chain</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(blocks); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		block </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> blocks[i]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> block.</span><span style="color:#005CC5;">Number</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> parent.Number {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;number sequence not correct at </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">, </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> and </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, i, block.</span><span style="color:#005CC5;">Number</span><span style="color:#24292E;">(), parent.Number)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> block.</span><span style="color:#005CC5;">ParentHash</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> parent.Hash {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;parent hash not correct&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> b.consensus.</span><span style="color:#005CC5;">VerifyHeader</span><span style="color:#24292E;">(parent, block.Header, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to verify the header: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// verify body data</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> hash </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> buildroot.</span><span style="color:#005CC5;">CalculateUncleRoot</span><span style="color:#24292E;">(block.Uncles); hash </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> block.Header.Sha3Uncles {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;uncle root hash mismatch: have </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">, want </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, hash, block.Header.Sha3Uncles)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> hash </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> buildroot.</span><span style="color:#005CC5;">CalculateTransactionsRoot</span><span style="color:#24292E;">(block.Transactions); hash </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> block.Header.TxRoot {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;transaction root hash mismatch: have </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">, want </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, hash, block.Header.TxRoot)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> block.Header</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Write chain</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> indx, block </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> blocks {</span></span>
<span class="line"><span style="color:#24292E;">		header </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> block.Header</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		body </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> block.</span><span style="color:#005CC5;">Body</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> b.db.</span><span style="color:#005CC5;">WriteBody</span><span style="color:#24292E;">(header.Hash, block.</span><span style="color:#005CC5;">Body</span><span style="color:#24292E;">()); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		b.bodiesCache.</span><span style="color:#005CC5;">Add</span><span style="color:#24292E;">(header.Hash, body)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// Verify uncles. It requires to have the bodies on memory</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> b.</span><span style="color:#005CC5;">VerifyUncles</span><span style="color:#24292E;">(block); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// Process and validate the block</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> b.</span><span style="color:#005CC5;">processBlock</span><span style="color:#24292E;">(blocks[indx]); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// Write the header to the chain</span></span>
<span class="line"><span style="color:#24292E;">		evnt </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">Event{}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> b.</span><span style="color:#005CC5;">writeHeaderImpl</span><span style="color:#24292E;">(evnt, header); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		b.</span><span style="color:#005CC5;">dispatchEvent</span><span style="color:#24292E;">(evnt)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// Update the average gas price</span></span>
<span class="line"><span style="color:#24292E;">		b.</span><span style="color:#005CC5;">UpdateGasPriceAvg</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(big.Int).</span><span style="color:#005CC5;">SetUint64</span><span style="color:#24292E;">(header.GasUsed))</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>The <em>WriteBlocks</em> method is the entry point to write blocks into the blockchain. As a parameter, it takes in a range of blocks.<br> Firstly, the blocks are validated. After that, they are written to the chain.</p><p>The actual <em>state transition</em> is performed by calling the <em>processBlock</em> method within <em>WriteBlocks</em>.</p><p>It is worth mentioning that, because it is the entry point for writing blocks to the blockchain, other modules (such as the <strong>Sealer</strong>) utilize this method.</p><h2 id="blockchain-subscriptions" tabindex="-1">Blockchain Subscriptions <a class="header-anchor" href="#blockchain-subscriptions" aria-label="Permalink to &quot;Blockchain Subscriptions&quot;">â€‹</a></h2><p>There needs to be a way to monitor blockchain-related changes. <br> This is where <strong>Subscriptions</strong> come in.</p><p>Subscriptions are a way to tap into blockchain event streams and instantly receive meaningful data.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Subscription</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Returns a Blockchain Event channel</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">GetEventCh</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Event</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Returns the latest event (blocking)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">GetEvent</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Event</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Closes the subscription</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Subscription</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Returns a Blockchain Event channel</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">GetEventCh</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Event</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Returns the latest event (blocking)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">GetEvent</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Event</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Closes the subscription</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>The <strong>Blockchain Events</strong> contain information regarding any changes made to the actual chain. This includes reorganizations, as well as new blocks:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Event</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Old chain removed if there was a reorg</span></span>
<span class="line"><span style="color:#E1E4E8;">	OldChain []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">types.Header</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// New part of the chain (or a fork)</span></span>
<span class="line"><span style="color:#E1E4E8;">	NewChain []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">types.Header</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Difficulty is the new difficulty created with this event</span></span>
<span class="line"><span style="color:#E1E4E8;">	Difficulty </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">big.Int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Type is the type of event</span></span>
<span class="line"><span style="color:#E1E4E8;">	Type EventType</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Source is the source that generated the blocks for the event</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// right now it can be either the Sealer or the Syncer. TODO</span></span>
<span class="line"><span style="color:#E1E4E8;">	Source </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Event</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Old chain removed if there was a reorg</span></span>
<span class="line"><span style="color:#24292E;">	OldChain []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">types.Header</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// New part of the chain (or a fork)</span></span>
<span class="line"><span style="color:#24292E;">	NewChain []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">types.Header</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Difficulty is the new difficulty created with this event</span></span>
<span class="line"><span style="color:#24292E;">	Difficulty </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">big.Int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Type is the type of event</span></span>
<span class="line"><span style="color:#24292E;">	Type EventType</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Source is the source that generated the blocks for the event</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// right now it can be either the Sealer or the Syncer. TODO</span></span>
<span class="line"><span style="color:#24292E;">	Source </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Refresher</p><p>Do you remember when we mentioned the <em><strong>monitor</strong></em> command in the <a href="/docs/get-started/cli-commands">CLI Commands</a>?</p><p>The Blockchain Events are the original events that happen in Lyfebloc Network, and they&#39;re later mapped to a Protocol Buffers message format for easy transfer.</p></div>`,20),e=[o];function t(c,r,E,y,i,h){return n(),a("div",null,e)}const b=s(p,[["render",t]]);export{d as __pageData,b as default};
